"""
Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []
) on OBJECT

"""Add date formatting options."""
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlurredOptions {
  """
  Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat

  """Width of the generated low-res preview. Default is 20px"""
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

input DirectoryFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  children: NodeFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

input DirectorySortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  changeTime: SortOrderEnum
  children: NodeSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

enum FieldSelectorEnum {
  SELECT
}

type File implements Node {
  absolutePath: String!
  accessTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp
  children: [Node!]!

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]
  ctime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!

  """Copy file to static directory and return public url to it"""
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
  url: String
}

type FileConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

input FileFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  childImageSharp: ImageSharpFieldSelector
  children: NodeFieldSelector
  childrenImageSharp: ImageSharpFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  publicURL: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
  url: FieldSelectorEnum
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  children: NodeFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
  url: StringQueryOperatorInput
}

type FileGroupConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

input FileSortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  changeTime: SortOrderEnum
  childImageSharp: ImageSharpSortInput
  children: NodeSortInput
  childrenImageSharp: ImageSharpSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  publicURL: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
  url: SortOrderEnum
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

scalar GatsbyImageData

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  in: [GatsbyImageData]
  ne: GatsbyImageData
  nin: [GatsbyImageData]
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

input IDQueryOperatorInput {
  eq: ID
  in: [ID]
  ne: ID
  nin: [ID]
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient = {}, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace = {}, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)"
    base64Width: Int
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient = {}
    fit: ImageFit = COVER
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    jpegQuality: Int
    maxHeight: Int
    maxWidth: Int
    pngCompressionSpeed: Int = 4
    pngQuality: Int
    quality: Int
    rotate: Int = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    traceSVG: Potrace = {}
    trim: Float = 0
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """
    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient = {}, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace = {}, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

input ImageSharpFieldSelector {
  children: NodeFieldSelector
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  original: ImageSharpOriginalFieldSelector
  parent: NodeFieldSelector
  resize: ImageSharpResizeFieldSelector
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

input ImageSharpFixedFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpFixedSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

input ImageSharpFluidFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  sizes: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

input ImageSharpFluidSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationHeight: SortOrderEnum
  presentationWidth: SortOrderEnum
  sizes: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

input ImageSharpOriginalFieldSelector {
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpOriginalSortInput {
  height: SortOrderEnum
  src: SortOrderEnum
  width: SortOrderEnum
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

input ImageSharpResizeFieldSelector {
  aspectRatio: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpResizeSortInput {
  aspectRatio: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpSortInput {
  children: NodeSortInput
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  original: ImageSharpOriginalSortInput
  parent: NodeSortInput
  resize: ImageSharpResizeSortInput
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

type Internal {
  content: String
  contentDigest: String!
  contentFilePath: String
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  contentFilePath: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

"""Node Interface"""
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

input NodeFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input NodeSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

type Query {
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: [DirectorySortInput]): DirectoryConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: [FileSortInput]): FileConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: [ImageSharpSortInput]): ImageSharpConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: [SiteSortInput]): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: [SiteBuildMetadataSortInput]): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: [SiteFunctionSortInput]): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: [SitePageSortInput]): SitePageConnection!
  allWp(filter: WpFilterInput, limit: Int, skip: Int, sort: [WpSortInput]): WpConnection!
  allWpCategory(filter: WpCategoryFilterInput, limit: Int, skip: Int, sort: [WpCategorySortInput]): WpCategoryConnection!
  allWpComment(filter: WpCommentFilterInput, limit: Int, skip: Int, sort: [WpCommentSortInput]): WpCommentConnection!
  allWpCommentAuthor(filter: WpCommentAuthorFilterInput, limit: Int, skip: Int, sort: [WpCommentAuthorSortInput]): WpCommentAuthorConnection!
  allWpCommenter(filter: WpCommenterFilterInput, limit: Int, skip: Int, sort: [WpCommenterSortInput]): WpCommenterConnection!
  allWpContentNode(filter: WpContentNodeFilterInput, limit: Int, skip: Int, sort: [WpContentNodeSortInput]): WpContentNodeConnection!
  allWpContentType(filter: WpContentTypeFilterInput, limit: Int, skip: Int, sort: [WpContentTypeSortInput]): WpContentTypeConnection!
  allWpHierarchicalContentNode(filter: WpHierarchicalContentNodeFilterInput, limit: Int, skip: Int, sort: [WpHierarchicalContentNodeSortInput]): WpHierarchicalContentNodeConnection!
  allWpHierarchicalNode(filter: WpHierarchicalNodeFilterInput, limit: Int, skip: Int, sort: [WpHierarchicalNodeSortInput]): WpHierarchicalNodeConnection!
  allWpHierarchicalTermNode(filter: WpHierarchicalTermNodeFilterInput, limit: Int, skip: Int, sort: [WpHierarchicalTermNodeSortInput]): WpHierarchicalTermNodeConnection!
  allWpMediaItem(filter: WpMediaItemFilterInput, limit: Int, skip: Int, sort: [WpMediaItemSortInput]): WpMediaItemConnection!
  allWpMenu(filter: WpMenuFilterInput, limit: Int, skip: Int, sort: [WpMenuSortInput]): WpMenuConnection!
  allWpMenuItem(filter: WpMenuItemFilterInput, limit: Int, skip: Int, sort: [WpMenuItemSortInput]): WpMenuItemConnection!
  allWpMenuItemLinkable(filter: WpMenuItemLinkableFilterInput, limit: Int, skip: Int, sort: [WpMenuItemLinkableSortInput]): WpMenuItemLinkableConnection!
  allWpNodeWithAuthor(filter: WpNodeWithAuthorFilterInput, limit: Int, skip: Int, sort: [WpNodeWithAuthorSortInput]): WpNodeWithAuthorConnection!
  allWpNodeWithComments(filter: WpNodeWithCommentsFilterInput, limit: Int, skip: Int, sort: [WpNodeWithCommentsSortInput]): WpNodeWithCommentsConnection!
  allWpNodeWithContentEditor(filter: WpNodeWithContentEditorFilterInput, limit: Int, skip: Int, sort: [WpNodeWithContentEditorSortInput]): WpNodeWithContentEditorConnection!
  allWpNodeWithExcerpt(filter: WpNodeWithExcerptFilterInput, limit: Int, skip: Int, sort: [WpNodeWithExcerptSortInput]): WpNodeWithExcerptConnection!
  allWpNodeWithFeaturedImage(filter: WpNodeWithFeaturedImageFilterInput, limit: Int, skip: Int, sort: [WpNodeWithFeaturedImageSortInput]): WpNodeWithFeaturedImageConnection!
  allWpNodeWithPageAttributes(filter: WpNodeWithPageAttributesFilterInput, limit: Int, skip: Int, sort: [WpNodeWithPageAttributesSortInput]): WpNodeWithPageAttributesConnection!
  allWpNodeWithRevisions(filter: WpNodeWithRevisionsFilterInput, limit: Int, skip: Int, sort: [WpNodeWithRevisionsSortInput]): WpNodeWithRevisionsConnection!
  allWpNodeWithTemplate(filter: WpNodeWithTemplateFilterInput, limit: Int, skip: Int, sort: [WpNodeWithTemplateSortInput]): WpNodeWithTemplateConnection!
  allWpNodeWithTitle(filter: WpNodeWithTitleFilterInput, limit: Int, skip: Int, sort: [WpNodeWithTitleSortInput]): WpNodeWithTitleConnection!
  allWpNodeWithTrackbacks(filter: WpNodeWithTrackbacksFilterInput, limit: Int, skip: Int, sort: [WpNodeWithTrackbacksSortInput]): WpNodeWithTrackbacksConnection!
  allWpPage(filter: WpPageFilterInput, limit: Int, skip: Int, sort: [WpPageSortInput]): WpPageConnection!
  allWpPost(filter: WpPostFilterInput, limit: Int, skip: Int, sort: [WpPostSortInput]): WpPostConnection!
  allWpPostFormat(filter: WpPostFormatFilterInput, limit: Int, skip: Int, sort: [WpPostFormatSortInput]): WpPostFormatConnection!
  allWpTag(filter: WpTagFilterInput, limit: Int, skip: Int, sort: [WpTagSortInput]): WpTagConnection!
  allWpTaxonomy(filter: WpTaxonomyFilterInput, limit: Int, skip: Int, sort: [WpTaxonomySortInput]): WpTaxonomyConnection!
  allWpTermNode(filter: WpTermNodeFilterInput, limit: Int, skip: Int, sort: [WpTermNodeSortInput]): WpTermNodeConnection!
  allWpUniformResourceIdentifiable(filter: WpUniformResourceIdentifiableFilterInput, limit: Int, skip: Int, sort: [WpUniformResourceIdentifiableSortInput]): WpUniformResourceIdentifiableConnection!
  allWpUser(filter: WpUserFilterInput, limit: Int, skip: Int, sort: [WpUserSortInput]): WpUserConnection!
  allWpUserRole(filter: WpUserRoleFilterInput, limit: Int, skip: Int, sort: [WpUserRoleSortInput]): WpUserRoleConnection!
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput, url: StringQueryOperatorInput): File
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: BooleanQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput): SitePage
  wp(allSettings: WpSettingsFilterInput, children: NodeFilterListInput, discussionSettings: WpDiscussionSettingsFilterInput, generalSettings: WpGeneralSettingsFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, readingSettings: WpReadingSettingsFilterInput, wpGatsby: WpWPGatsbyFilterInput, writingSettings: WpWritingSettingsFilterInput): Wp
  wpCategory(ancestors: WpCategoryToAncestorsCategoryConnectionTypeFilterInput, children: NodeFilterListInput, contentNodes: WpCategoryToContentNodeConnectionTypeFilterInput, count: IntQueryOperatorInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, link: StringQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, posts: WpCategoryToPostConnectionTypeFilterInput, slug: StringQueryOperatorInput, taxonomy: WpCategoryToTaxonomyConnectionEdgeTypeFilterInput, taxonomyName: StringQueryOperatorInput, termGroupId: IntQueryOperatorInput, termTaxonomyId: IntQueryOperatorInput, uri: StringQueryOperatorInput, wpChildren: WpCategoryToCategoryConnectionTypeFilterInput, wpParent: WpCategoryToParentCategoryConnectionEdgeTypeFilterInput): WpCategory
  wpComment(agent: StringQueryOperatorInput, author: WpCommentToCommenterConnectionEdgeTypeFilterInput, authorIp: StringQueryOperatorInput, children: NodeFilterListInput, commentedOn: WpCommentToContentNodeConnectionEdgeTypeFilterInput, content: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, date: DateQueryOperatorInput, dateGmt: DateQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, karma: IntQueryOperatorInput, link: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, replies: WpCommentToCommentConnectionTypeFilterInput, status: WpCommentStatusEnumQueryOperatorInput, type: StringQueryOperatorInput, uri: StringQueryOperatorInput, wpParent: WpCommentToParentCommentConnectionEdgeTypeFilterInput): WpComment
  wpCommentAuthor(avatar: WpAvatarFilterInput, children: NodeFilterListInput, databaseId: IntQueryOperatorInput, email: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, url: StringQueryOperatorInput): WpCommentAuthor
  wpCommenter(avatar: WpAvatarFilterInput, children: NodeFilterListInput, databaseId: IntQueryOperatorInput, email: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, url: StringQueryOperatorInput): WpCommenter
  wpContentNode(children: NodeFilterListInput, contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput, contentTypeName: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, date: DateQueryOperatorInput, dateGmt: DateQueryOperatorInput, desiredSlug: StringQueryOperatorInput, enclosure: StringQueryOperatorInput, guid: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput, link: StringQueryOperatorInput, modified: DateQueryOperatorInput, modifiedGmt: DateQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput, status: StringQueryOperatorInput, template: WpContentTemplateFilterInput, uri: StringQueryOperatorInput): WpContentNode
  wpContentType(archivePath: StringQueryOperatorInput, canExport: BooleanQueryOperatorInput, children: NodeFilterListInput, connectedTaxonomies: WpContentTypeToTaxonomyConnectionTypeFilterInput, contentNodes: WpContentTypeToContentNodeConnectionTypeFilterInput, deleteWithUser: BooleanQueryOperatorInput, description: StringQueryOperatorInput, excludeFromSearch: BooleanQueryOperatorInput, graphqlPluralName: StringQueryOperatorInput, graphqlSingleName: StringQueryOperatorInput, hasArchive: BooleanQueryOperatorInput, hierarchical: BooleanQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, label: StringQueryOperatorInput, labels: WpPostTypeLabelDetailsFilterInput, menuIcon: StringQueryOperatorInput, menuPosition: IntQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, public: BooleanQueryOperatorInput, publiclyQueryable: BooleanQueryOperatorInput, restBase: StringQueryOperatorInput, restControllerClass: StringQueryOperatorInput, showInAdminBar: BooleanQueryOperatorInput, showInGraphql: BooleanQueryOperatorInput, showInMenu: BooleanQueryOperatorInput, showInNavMenus: BooleanQueryOperatorInput, showInRest: BooleanQueryOperatorInput, showUi: BooleanQueryOperatorInput, uri: StringQueryOperatorInput): WpContentType
  wpHierarchicalContentNode(ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput, children: NodeFilterListInput, contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput, contentTypeName: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, date: DateQueryOperatorInput, dateGmt: DateQueryOperatorInput, desiredSlug: StringQueryOperatorInput, enclosure: StringQueryOperatorInput, guid: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput, link: StringQueryOperatorInput, modified: DateQueryOperatorInput, modifiedGmt: DateQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, slug: StringQueryOperatorInput, status: StringQueryOperatorInput, template: WpContentTemplateFilterInput, uri: StringQueryOperatorInput, wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput, wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput): WpHierarchicalContentNode
  wpHierarchicalNode(children: NodeFilterListInput, databaseId: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput): WpHierarchicalNode
  wpHierarchicalTermNode(children: NodeFilterListInput, count: IntQueryOperatorInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, link: StringQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, slug: StringQueryOperatorInput, taxonomyName: StringQueryOperatorInput, termGroupId: IntQueryOperatorInput, termTaxonomyId: IntQueryOperatorInput, uri: StringQueryOperatorInput): WpHierarchicalTermNode
  wpMediaItem(altText: StringQueryOperatorInput, ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput, author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput, authorDatabaseId: IntQueryOperatorInput, authorId: IDQueryOperatorInput, caption: StringQueryOperatorInput, children: NodeFilterListInput, commentCount: IntQueryOperatorInput, commentStatus: StringQueryOperatorInput, comments: WpMediaItemToCommentConnectionTypeFilterInput, contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput, contentTypeName: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, date: DateQueryOperatorInput, dateGmt: DateQueryOperatorInput, description: StringQueryOperatorInput, desiredSlug: StringQueryOperatorInput, enclosure: StringQueryOperatorInput, fileSize: IntQueryOperatorInput, filename: StringQueryOperatorInput, filesize: IntQueryOperatorInput, gatsbyImage: GatsbyImageDataQueryOperatorInput, guid: StringQueryOperatorInput, height: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput, link: StringQueryOperatorInput, localFile: FileFilterInput, mediaDetails: WpMediaDetailsFilterInput, mediaItemUrl: StringQueryOperatorInput, mediaType: StringQueryOperatorInput, mimeType: StringQueryOperatorInput, modified: DateQueryOperatorInput, modifiedGmt: DateQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, publicUrl: StringQueryOperatorInput, resize: RemoteFileResizeFilterInput, sizes: StringQueryOperatorInput, slug: StringQueryOperatorInput, sourceUrl: StringQueryOperatorInput, srcSet: StringQueryOperatorInput, status: StringQueryOperatorInput, template: WpContentTemplateFilterInput, title: StringQueryOperatorInput, uri: StringQueryOperatorInput, width: IntQueryOperatorInput, wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput, wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput): WpMediaItem
  wpMenu(children: NodeFilterListInput, count: IntQueryOperatorInput, databaseId: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locations: WpMenuLocationEnumQueryOperatorInput, menuItems: WpMenuToMenuItemConnectionTypeFilterInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput): WpMenu
  wpMenuItem(childItems: WpMenuItemToMenuItemConnectionTypeFilterInput, children: NodeFilterListInput, connectedNode: WpMenuItemToMenuItemLinkableConnectionEdgeTypeFilterInput, cssClasses: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, label: StringQueryOperatorInput, linkRelationship: StringQueryOperatorInput, locations: WpMenuLocationEnumQueryOperatorInput, menu: WpMenuItemToMenuConnectionEdgeTypeFilterInput, nodeType: StringQueryOperatorInput, order: IntQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, path: StringQueryOperatorInput, target: StringQueryOperatorInput, title: StringQueryOperatorInput, uri: StringQueryOperatorInput, url: StringQueryOperatorInput): WpMenuItem
  wpMenuItemLinkable(children: NodeFilterListInput, databaseId: IntQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, uri: StringQueryOperatorInput): WpMenuItemLinkable
  wpNodeWithAuthor(author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput, authorDatabaseId: IntQueryOperatorInput, authorId: IDQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithAuthor
  wpNodeWithComments(children: NodeFilterListInput, commentCount: IntQueryOperatorInput, commentStatus: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithComments
  wpNodeWithContentEditor(children: NodeFilterListInput, content: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithContentEditor
  wpNodeWithExcerpt(children: NodeFilterListInput, excerpt: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithExcerpt
  wpNodeWithFeaturedImage(children: NodeFilterListInput, featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput, featuredImageDatabaseId: IntQueryOperatorInput, featuredImageId: IDQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithFeaturedImage
  wpNodeWithPageAttributes(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, menuOrder: IntQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithPageAttributes
  wpNodeWithRevisions(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isRevision: BooleanQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpNodeWithRevisions
  wpNodeWithTemplate(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, template: WpContentTemplateFilterInput): WpNodeWithTemplate
  wpNodeWithTitle(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, title: StringQueryOperatorInput): WpNodeWithTitle
  wpNodeWithTrackbacks(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, pingStatus: StringQueryOperatorInput, pinged: StringQueryOperatorInput, toPing: StringQueryOperatorInput): WpNodeWithTrackbacks
  wpPage(ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput, author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput, authorDatabaseId: IntQueryOperatorInput, authorId: IDQueryOperatorInput, children: NodeFilterListInput, commentCount: IntQueryOperatorInput, commentStatus: StringQueryOperatorInput, comments: WpPageToCommentConnectionTypeFilterInput, content: StringQueryOperatorInput, contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput, contentTypeName: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, date: DateQueryOperatorInput, dateGmt: DateQueryOperatorInput, desiredSlug: StringQueryOperatorInput, enclosure: StringQueryOperatorInput, excerpt: StringQueryOperatorInput, featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput, featuredImageDatabaseId: IntQueryOperatorInput, featuredImageId: IDQueryOperatorInput, guid: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isPrivacyPage: BooleanQueryOperatorInput, isRevision: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput, link: StringQueryOperatorInput, menuOrder: IntQueryOperatorInput, modified: DateQueryOperatorInput, modifiedGmt: DateQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, parentDatabaseId: IntQueryOperatorInput, parentId: IDQueryOperatorInput, slug: StringQueryOperatorInput, status: StringQueryOperatorInput, template: WpContentTemplateFilterInput, title: StringQueryOperatorInput, uri: StringQueryOperatorInput, wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput, wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput): WpPage
  wpPost(author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput, authorDatabaseId: IntQueryOperatorInput, authorId: IDQueryOperatorInput, categories: WpPostToCategoryConnectionTypeFilterInput, children: NodeFilterListInput, commentCount: IntQueryOperatorInput, commentStatus: StringQueryOperatorInput, comments: WpPostToCommentConnectionTypeFilterInput, content: StringQueryOperatorInput, contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput, contentTypeName: StringQueryOperatorInput, databaseId: IntQueryOperatorInput, date: DateQueryOperatorInput, dateGmt: DateQueryOperatorInput, desiredSlug: StringQueryOperatorInput, enclosure: StringQueryOperatorInput, excerpt: StringQueryOperatorInput, featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput, featuredImageDatabaseId: IntQueryOperatorInput, featuredImageId: IDQueryOperatorInput, guid: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isRevision: BooleanQueryOperatorInput, isSticky: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput, link: StringQueryOperatorInput, modified: DateQueryOperatorInput, modifiedGmt: DateQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, pingStatus: StringQueryOperatorInput, pinged: StringQueryOperatorInput, postFormats: WpPostToPostFormatConnectionTypeFilterInput, slug: StringQueryOperatorInput, status: StringQueryOperatorInput, tags: WpPostToTagConnectionTypeFilterInput, template: WpContentTemplateFilterInput, terms: WpPostToTermNodeConnectionTypeFilterInput, title: StringQueryOperatorInput, toPing: StringQueryOperatorInput, uri: StringQueryOperatorInput): WpPost
  wpPostFormat(children: NodeFilterListInput, contentNodes: WpPostFormatToContentNodeConnectionTypeFilterInput, count: IntQueryOperatorInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, link: StringQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, posts: WpPostFormatToPostConnectionTypeFilterInput, slug: StringQueryOperatorInput, taxonomy: WpPostFormatToTaxonomyConnectionEdgeTypeFilterInput, taxonomyName: StringQueryOperatorInput, termGroupId: IntQueryOperatorInput, termTaxonomyId: IntQueryOperatorInput, uri: StringQueryOperatorInput): WpPostFormat
  wpTag(children: NodeFilterListInput, contentNodes: WpTagToContentNodeConnectionTypeFilterInput, count: IntQueryOperatorInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, link: StringQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, posts: WpTagToPostConnectionTypeFilterInput, slug: StringQueryOperatorInput, taxonomy: WpTagToTaxonomyConnectionEdgeTypeFilterInput, taxonomyName: StringQueryOperatorInput, termGroupId: IntQueryOperatorInput, termTaxonomyId: IntQueryOperatorInput, uri: StringQueryOperatorInput): WpTag
  wpTaxonomy(archivePath: StringQueryOperatorInput, children: NodeFilterListInput, connectedContentTypes: WpTaxonomyToContentTypeConnectionTypeFilterInput, connectedTerms: WpTaxonomyToTermNodeConnectionTypeFilterInput, description: StringQueryOperatorInput, graphqlPluralName: StringQueryOperatorInput, graphqlSingleName: StringQueryOperatorInput, hierarchical: BooleanQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, label: StringQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, public: BooleanQueryOperatorInput, restBase: StringQueryOperatorInput, restControllerClass: StringQueryOperatorInput, showCloud: BooleanQueryOperatorInput, showInAdminColumn: BooleanQueryOperatorInput, showInGraphql: BooleanQueryOperatorInput, showInMenu: BooleanQueryOperatorInput, showInNavMenus: BooleanQueryOperatorInput, showInQuickEdit: BooleanQueryOperatorInput, showInRest: BooleanQueryOperatorInput, showUi: BooleanQueryOperatorInput): WpTaxonomy
  wpTermNode(children: NodeFilterListInput, count: IntQueryOperatorInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, link: StringQueryOperatorInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput, taxonomyName: StringQueryOperatorInput, termGroupId: IntQueryOperatorInput, termTaxonomyId: IntQueryOperatorInput, uri: StringQueryOperatorInput): WpTermNode
  wpUniformResourceIdentifiable(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput, uri: StringQueryOperatorInput): WpUniformResourceIdentifiable
  wpUser(avatar: WpAvatarFilterInput, capKey: StringQueryOperatorInput, capabilities: StringQueryOperatorInput, children: NodeFilterListInput, comments: WpUserToCommentConnectionTypeFilterInput, databaseId: IntQueryOperatorInput, description: StringQueryOperatorInput, email: StringQueryOperatorInput, extraCapabilities: StringQueryOperatorInput, firstName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, isComment: BooleanQueryOperatorInput, isContentNode: BooleanQueryOperatorInput, isFrontPage: BooleanQueryOperatorInput, isPostsPage: BooleanQueryOperatorInput, isTermNode: BooleanQueryOperatorInput, lastName: StringQueryOperatorInput, locale: StringQueryOperatorInput, name: StringQueryOperatorInput, nicename: StringQueryOperatorInput, nickname: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, pages: WpUserToPageConnectionTypeFilterInput, parent: NodeFilterInput, posts: WpUserToPostConnectionTypeFilterInput, registeredDate: StringQueryOperatorInput, roles: WpUserToUserRoleConnectionTypeFilterInput, shouldShowAdminToolbar: BooleanQueryOperatorInput, slug: StringQueryOperatorInput, uri: StringQueryOperatorInput, url: StringQueryOperatorInput, username: StringQueryOperatorInput): WpUser
  wpUserRole(capabilities: StringQueryOperatorInput, children: NodeFilterListInput, displayName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeType: StringQueryOperatorInput, parent: NodeFilterInput): WpUserRole
}

"""Remote Interface"""
interface RemoteFile {
  filename: String!
  filesize: Int

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    "\nIf set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.\nIf neither width or height is provided, height will be set based on the intrinsic width of the source image.\n"
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    "\nSpecifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,\nbased on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].\nIt will never generate any images larger than the source.\n"
    breakpoints: [Int] = [750, 1080, 1366, 1920]
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored.\n"
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    "\nIf set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
    height: Int

    "\nThe layout for the image.\nFIXED: A static image sized, that does not resize according to the screen width\nFULL_WIDTH: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\nCONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n"
    layout: RemoteFileLayout = CONSTRAINED

    "\nA list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.\nDefault is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.\n"
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    "\nFormat of generated placeholder image, displayed while the main image loads.\nBLURRED: a blurred, low resolution image, encoded as a base64 data URI\nDOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).\nTRACED_SVG: deprecated. Will use DOMINANT_COLOR.\nNONE: no placeholder. Set the argument \"backgroundColor\" to use a fixed background color."
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR
    quality: Int = 75

    "\nThe \"sizes\" property, passed to the img tag. This describes the display size of the image.\nThis does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image\ncontainer will be the full width of the screen. In these cases we will generate an appropriate value.\n"
    sizes: String

    "\nThe display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.\nThe actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities\nIgnored if layout = FLUID.\n"
    width: Int
  ): GatsbyImageData
  height: Int
  id: ID!
  mimeType: String!
  publicUrl: String!
  resize(
    aspectRatio: Float
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored."
    format: RemoteFileFormat = AUTO
    height: Int
    quality: Int = 75
    width: Int
  ): RemoteFileResize
  width: Int
}

enum RemoteFileCropFocus {
  BOTTOM
  CENTER
  EDGES
  ENTROPY
  FACES
  LEFT
  RIGHT
  TOP
}

enum RemoteFileFit {
  CONTAIN
  COVER
  FILL
  OUTSIDE
}

enum RemoteFileFormat {
  AUTO
  AVIF
  JPG
  PNG
  WEBP
}

enum RemoteFileLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum RemoteFilePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type RemoteFileResize {
  height: Int
  src: String
  width: Int
}

input RemoteFileResizeFieldSelector {
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  width: FieldSelectorEnum
}

input RemoteFileResizeFilterInput {
  height: IntQueryOperatorInput
  src: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input RemoteFileResizeSortInput {
  height: SortOrderEnum
  src: SortOrderEnum
  width: SortOrderEnum
}

type Site implements Node {
  buildTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  graphqlTypegen: Boolean
  id: ID!
  internal: Internal!
  jsxRuntime: String
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  siteMetadata: SiteSiteMetadata
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

type SiteConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  graphqlTypegen: FieldSelectorEnum
  host: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  jsxRuntime: FieldSelectorEnum
  parent: NodeFieldSelector
  pathPrefix: FieldSelectorEnum
  polyfill: FieldSelectorEnum
  port: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  trailingSlash: FieldSelectorEnum
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  graphqlTypegen: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

input SiteFunctionFieldSelector {
  absoluteCompiledFilePath: FieldSelectorEnum
  children: NodeFieldSelector
  functionRoute: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  matchPath: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  parent: NodeFieldSelector
  pluginName: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

input SiteFunctionSortInput {
  absoluteCompiledFilePath: SortOrderEnum
  children: NodeSortInput
  functionRoute: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  matchPath: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  parent: NodeSortInput
  pluginName: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
}

type SiteGroupConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
}

type SitePageConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

input SitePageFieldSelector {
  children: NodeFieldSelector
  component: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  internalComponentName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  parent: NodeFieldSelector
  path: FieldSelectorEnum
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

input SitePageSortInput {
  children: NodeSortInput
  component: SortOrderEnum
  componentChunkName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  internalComponentName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  parent: NodeSortInput
  path: SortOrderEnum
}

type SiteSiteMetadata {
  author: SiteSiteMetadataAuthor
  description: String
  siteUrl: String
  social: SiteSiteMetadataSocial
  title: String
}

type SiteSiteMetadataAuthor {
  name: String
  summary: String
}

input SiteSiteMetadataAuthorFieldSelector {
  name: FieldSelectorEnum
  summary: FieldSelectorEnum
}

input SiteSiteMetadataAuthorFilterInput {
  name: StringQueryOperatorInput
  summary: StringQueryOperatorInput
}

input SiteSiteMetadataAuthorSortInput {
  name: SortOrderEnum
  summary: SortOrderEnum
}

input SiteSiteMetadataFieldSelector {
  author: SiteSiteMetadataAuthorFieldSelector
  description: FieldSelectorEnum
  siteUrl: FieldSelectorEnum
  social: SiteSiteMetadataSocialFieldSelector
  title: FieldSelectorEnum
}

input SiteSiteMetadataFilterInput {
  author: SiteSiteMetadataAuthorFilterInput
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  social: SiteSiteMetadataSocialFilterInput
  title: StringQueryOperatorInput
}

type SiteSiteMetadataSocial {
  twitter: String
}

input SiteSiteMetadataSocialFieldSelector {
  twitter: FieldSelectorEnum
}

input SiteSiteMetadataSocialFilterInput {
  twitter: StringQueryOperatorInput
}

input SiteSiteMetadataSocialSortInput {
  twitter: SortOrderEnum
}

input SiteSiteMetadataSortInput {
  author: SiteSiteMetadataAuthorSortInput
  description: SortOrderEnum
  siteUrl: SortOrderEnum
  social: SiteSiteMetadataSocialSortInput
  title: SortOrderEnum
}

input SiteSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  graphqlTypegen: SortOrderEnum
  host: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  jsxRuntime: SortOrderEnum
  parent: NodeSortInput
  pathPrefix: SortOrderEnum
  polyfill: SortOrderEnum
  port: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  trailingSlash: SortOrderEnum
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient = {}
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0
}

input WebPOptions {
  quality: Int
}

"""Non-node WPGraphQL root fields."""
type Wp implements Node {
  """Entry point to get all settings for the site"""
  allSettings: WpSettings
  children: [Node!]!

  """Fields of the &#039;DiscussionSettings&#039; settings group"""
  discussionSettings: WpDiscussionSettings

  """Fields of the &#039;GeneralSettings&#039; settings group"""
  generalSettings: WpGeneralSettings
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node

  """Fields of the &#039;ReadingSettings&#039; settings group"""
  readingSettings: WpReadingSettings

  """Information needed by gatsby-source-wordpress."""
  wpGatsby: WpWPGatsby

  """Fields of the &#039;WritingSettings&#039; settings group"""
  writingSettings: WpWritingSettings
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type WpAvatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean

  """Height of the avatar image."""
  height: Int

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """URL for the gravatar image source."""
  url: String

  """Width of the avatar image."""
  width: Int
}

input WpAvatarFieldSelector {
  default: FieldSelectorEnum
  extraAttr: FieldSelectorEnum
  forceDefault: FieldSelectorEnum
  foundAvatar: FieldSelectorEnum
  height: FieldSelectorEnum
  rating: FieldSelectorEnum
  scheme: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  width: FieldSelectorEnum
}

input WpAvatarFilterInput {
  default: StringQueryOperatorInput
  extraAttr: StringQueryOperatorInput
  forceDefault: BooleanQueryOperatorInput
  foundAvatar: BooleanQueryOperatorInput
  height: IntQueryOperatorInput
  rating: StringQueryOperatorInput
  scheme: StringQueryOperatorInput
  size: IntQueryOperatorInput
  url: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input WpAvatarSortInput {
  default: SortOrderEnum
  extraAttr: SortOrderEnum
  forceDefault: SortOrderEnum
  foundAvatar: SortOrderEnum
  height: SortOrderEnum
  rating: SortOrderEnum
  scheme: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  width: SortOrderEnum
}

"""The category type"""
type WpCategory implements Node & WpDatabaseIdentifier & WpHierarchicalNode & WpHierarchicalTermNode & WpMenuItemLinkable & WpNode & WpTermNode & WpUniformResourceIdentifiable {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpCategoryToAncestorsCategoryConnectionType
  children: [Node!]!

  """Connection between the Category type and the ContentNode type"""
  contentNodes: WpCategoryToContentNodeConnectionType

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String
  nodeType: String
  parent: Node

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the Category type and the post type"""
  posts: WpCategoryToPostConnectionType

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the Category type and the Taxonomy type"""
  taxonomy: WpCategoryToTaxonomyConnectionEdgeType

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String

  """Connection between the category type and its children categories."""
  wpChildren: WpCategoryToCategoryConnectionType

  """Connection between the category type and its parent category."""
  wpParent: WpCategoryToParentCategoryConnectionEdgeType
}

type WpCategoryConnection {
  distinct(field: WpCategoryFieldSelector!): [String!]!
  edges: [WpCategoryEdge!]!
  group(field: WpCategoryFieldSelector!, limit: Int, skip: Int): [WpCategoryGroupConnection!]!
  max(field: WpCategoryFieldSelector!): Float
  min(field: WpCategoryFieldSelector!): Float
  nodes: [WpCategory!]!
  pageInfo: PageInfo!
  sum(field: WpCategoryFieldSelector!): Float
  totalCount: Int!
}

interface WpCategoryConnectionEdgeType implements WpEdgeType {
  """The connected category Node"""
  node: WpCategory!
}

interface WpCategoryConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpCategoryConnectionType implements WpConnectionType {
  """A list of connected category Nodes"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryConnectionPageInfoType!
}

type WpCategoryEdge {
  next: WpCategory
  node: WpCategory!
  previous: WpCategory
}

input WpCategoryFieldSelector {
  ancestors: WpCategoryToAncestorsCategoryConnectionTypeFieldSelector
  children: NodeFieldSelector
  contentNodes: WpCategoryToContentNodeConnectionTypeFieldSelector
  count: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  link: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  posts: WpCategoryToPostConnectionTypeFieldSelector
  slug: FieldSelectorEnum
  taxonomy: WpCategoryToTaxonomyConnectionEdgeTypeFieldSelector
  taxonomyName: FieldSelectorEnum
  termGroupId: FieldSelectorEnum
  termTaxonomyId: FieldSelectorEnum
  uri: FieldSelectorEnum
  wpChildren: WpCategoryToCategoryConnectionTypeFieldSelector
  wpParent: WpCategoryToParentCategoryConnectionEdgeTypeFieldSelector
}

input WpCategoryFilterInput {
  ancestors: WpCategoryToAncestorsCategoryConnectionTypeFilterInput
  children: NodeFilterListInput
  contentNodes: WpCategoryToContentNodeConnectionTypeFilterInput
  count: IntQueryOperatorInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  link: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  posts: WpCategoryToPostConnectionTypeFilterInput
  slug: StringQueryOperatorInput
  taxonomy: WpCategoryToTaxonomyConnectionEdgeTypeFilterInput
  taxonomyName: StringQueryOperatorInput
  termGroupId: IntQueryOperatorInput
  termTaxonomyId: IntQueryOperatorInput
  uri: StringQueryOperatorInput
  wpChildren: WpCategoryToCategoryConnectionTypeFilterInput
  wpParent: WpCategoryToParentCategoryConnectionEdgeTypeFilterInput
}

input WpCategoryFilterListInput {
  elemMatch: WpCategoryFilterInput
}

type WpCategoryGroupConnection {
  distinct(field: WpCategoryFieldSelector!): [String!]!
  edges: [WpCategoryEdge!]!
  field: String!
  fieldValue: String
  group(field: WpCategoryFieldSelector!, limit: Int, skip: Int): [WpCategoryGroupConnection!]!
  max(field: WpCategoryFieldSelector!): Float
  min(field: WpCategoryFieldSelector!): Float
  nodes: [WpCategory!]!
  pageInfo: PageInfo!
  sum(field: WpCategoryFieldSelector!): Float
  totalCount: Int!
}

input WpCategorySortInput {
  ancestors: WpCategoryToAncestorsCategoryConnectionTypeSortInput
  children: NodeSortInput
  contentNodes: WpCategoryToContentNodeConnectionTypeSortInput
  count: SortOrderEnum
  databaseId: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  link: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  posts: WpCategoryToPostConnectionTypeSortInput
  slug: SortOrderEnum
  taxonomy: WpCategoryToTaxonomyConnectionEdgeTypeSortInput
  taxonomyName: SortOrderEnum
  termGroupId: SortOrderEnum
  termTaxonomyId: SortOrderEnum
  uri: SortOrderEnum
  wpChildren: WpCategoryToCategoryConnectionTypeSortInput
  wpParent: WpCategoryToParentCategoryConnectionEdgeTypeSortInput
}

"""Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot;"""
type WpCategoryToAncestorsCategoryConnectionPageInfoType implements WpCategoryConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpCategoryToAncestorsCategoryConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpCategoryToAncestorsCategoryConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpCategoryToAncestorsCategoryConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Category type and the category type"""
type WpCategoryToAncestorsCategoryConnectionType implements WpCategoryConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToAncestorsCategoryConnectionPageInfoType!
}

input WpCategoryToAncestorsCategoryConnectionTypeFieldSelector {
  nodes: WpCategoryFieldSelector
  pageInfo: WpCategoryToAncestorsCategoryConnectionPageInfoTypeFieldSelector
}

input WpCategoryToAncestorsCategoryConnectionTypeFilterInput {
  nodes: WpCategoryFilterListInput
  pageInfo: WpCategoryToAncestorsCategoryConnectionPageInfoTypeFilterInput
}

input WpCategoryToAncestorsCategoryConnectionTypeSortInput {
  nodes: WpCategorySortInput
  pageInfo: WpCategoryToAncestorsCategoryConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;CategoryToCategoryConnection&quot;"""
type WpCategoryToCategoryConnectionPageInfoType implements WpCategoryConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpCategoryToCategoryConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpCategoryToCategoryConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpCategoryToCategoryConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Category type and the category type"""
type WpCategoryToCategoryConnectionType implements WpCategoryConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToCategoryConnectionPageInfoType!
}

input WpCategoryToCategoryConnectionTypeFieldSelector {
  nodes: WpCategoryFieldSelector
  pageInfo: WpCategoryToCategoryConnectionPageInfoTypeFieldSelector
}

input WpCategoryToCategoryConnectionTypeFilterInput {
  nodes: WpCategoryFilterListInput
  pageInfo: WpCategoryToCategoryConnectionPageInfoTypeFilterInput
}

input WpCategoryToCategoryConnectionTypeSortInput {
  nodes: WpCategorySortInput
  pageInfo: WpCategoryToCategoryConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;CategoryToContentNodeConnection&quot;"""
type WpCategoryToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpCategoryToContentNodeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpCategoryToContentNodeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpCategoryToContentNodeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Category type and the ContentNode type"""
type WpCategoryToContentNodeConnectionType implements WpConnectionType & WpContentNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToContentNodeConnectionPageInfoType!
}

input WpCategoryToContentNodeConnectionTypeFieldSelector {
  nodes: WpContentNodeFieldSelector
  pageInfo: WpCategoryToContentNodeConnectionPageInfoTypeFieldSelector
}

input WpCategoryToContentNodeConnectionTypeFilterInput {
  nodes: WpContentNodeFilterListInput
  pageInfo: WpCategoryToContentNodeConnectionPageInfoTypeFilterInput
}

input WpCategoryToContentNodeConnectionTypeSortInput {
  nodes: WpContentNodeSortInput
  pageInfo: WpCategoryToContentNodeConnectionPageInfoTypeSortInput
}

"""Connection between the Category type and the category type"""
type WpCategoryToParentCategoryConnectionEdgeType implements WpCategoryConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpCategory!
}

input WpCategoryToParentCategoryConnectionEdgeTypeFieldSelector {
  node: WpCategoryFieldSelector
}

input WpCategoryToParentCategoryConnectionEdgeTypeFilterInput {
  node: WpCategoryFilterInput
}

input WpCategoryToParentCategoryConnectionEdgeTypeSortInput {
  node: WpCategorySortInput
}

"""Page Info on the &quot;CategoryToPostConnection&quot;"""
type WpCategoryToPostConnectionPageInfoType implements WpPageInfoType & WpPostConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpCategoryToPostConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpCategoryToPostConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpCategoryToPostConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Category type and the post type"""
type WpCategoryToPostConnectionType implements WpConnectionType & WpPostConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToPostConnectionPageInfoType!
}

input WpCategoryToPostConnectionTypeFieldSelector {
  nodes: WpPostFieldSelector
  pageInfo: WpCategoryToPostConnectionPageInfoTypeFieldSelector
}

input WpCategoryToPostConnectionTypeFilterInput {
  nodes: WpPostFilterListInput
  pageInfo: WpCategoryToPostConnectionPageInfoTypeFilterInput
}

input WpCategoryToPostConnectionTypeSortInput {
  nodes: WpPostSortInput
  pageInfo: WpCategoryToPostConnectionPageInfoTypeSortInput
}

"""Connection between the Category type and the Taxonomy type"""
type WpCategoryToTaxonomyConnectionEdgeType implements WpEdgeType & WpOneToOneConnectionType & WpTaxonomyConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTaxonomy!
}

input WpCategoryToTaxonomyConnectionEdgeTypeFieldSelector {
  node: WpTaxonomyFieldSelector
}

input WpCategoryToTaxonomyConnectionEdgeTypeFilterInput {
  node: WpTaxonomyFilterInput
}

input WpCategoryToTaxonomyConnectionEdgeTypeSortInput {
  node: WpTaxonomySortInput
}

"""A Comment object"""
type WpComment implements Node & WpDatabaseIdentifier & WpNode & WpUniformResourceIdentifiable {
  """
  User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """The author of the comment"""
  author: WpCommentToCommenterConnectionEdgeType

  """
  IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String
  children: [Node!]!

  """Connection between the Comment type and the ContentNode type"""
  commentedOn: WpCommentToContentNodeConnectionEdgeType

  """
  Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL.
  """
  content: String

  """The unique identifier stored in the database"""
  databaseId: Int!

  """
  Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """
  Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """The permalink of the comment"""
  link: String
  nodeType: String
  parent: Node

  """
  The database id of the parent comment node or null if it is the root comment
  """
  parentDatabaseId: Int

  """The globally unique identifier of the parent comment node."""
  parentId: ID

  """Connection between the Comment type and the Comment type"""
  replies: WpCommentToCommentConnectionType

  """
  The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
  """
  status: WpCommentStatusEnum

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String

  """The unique resource identifier path"""
  uri: String

  """Connection between the Comment type and the Comment type"""
  wpParent: WpCommentToParentCommentConnectionEdgeType
}

"""A Comment Author object"""
type WpCommentAuthor implements Node & WpCommenter & WpDatabaseIdentifier & WpNode {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar
  children: [Node!]!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The email for the comment author"""
  email: String
  id: ID!
  internal: Internal!

  """The name for the comment author."""
  name: String
  nodeType: String
  parent: Node

  """The url the comment author."""
  url: String
}

type WpCommentAuthorConnection {
  distinct(field: WpCommentAuthorFieldSelector!): [String!]!
  edges: [WpCommentAuthorEdge!]!
  group(field: WpCommentAuthorFieldSelector!, limit: Int, skip: Int): [WpCommentAuthorGroupConnection!]!
  max(field: WpCommentAuthorFieldSelector!): Float
  min(field: WpCommentAuthorFieldSelector!): Float
  nodes: [WpCommentAuthor!]!
  pageInfo: PageInfo!
  sum(field: WpCommentAuthorFieldSelector!): Float
  totalCount: Int!
}

type WpCommentAuthorEdge {
  next: WpCommentAuthor
  node: WpCommentAuthor!
  previous: WpCommentAuthor
}

input WpCommentAuthorFieldSelector {
  avatar: WpAvatarFieldSelector
  children: NodeFieldSelector
  databaseId: FieldSelectorEnum
  email: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  url: FieldSelectorEnum
}

input WpCommentAuthorFilterInput {
  avatar: WpAvatarFilterInput
  children: NodeFilterListInput
  databaseId: IntQueryOperatorInput
  email: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  url: StringQueryOperatorInput
}

type WpCommentAuthorGroupConnection {
  distinct(field: WpCommentAuthorFieldSelector!): [String!]!
  edges: [WpCommentAuthorEdge!]!
  field: String!
  fieldValue: String
  group(field: WpCommentAuthorFieldSelector!, limit: Int, skip: Int): [WpCommentAuthorGroupConnection!]!
  max(field: WpCommentAuthorFieldSelector!): Float
  min(field: WpCommentAuthorFieldSelector!): Float
  nodes: [WpCommentAuthor!]!
  pageInfo: PageInfo!
  sum(field: WpCommentAuthorFieldSelector!): Float
  totalCount: Int!
}

input WpCommentAuthorSortInput {
  avatar: WpAvatarSortInput
  children: NodeSortInput
  databaseId: SortOrderEnum
  email: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  url: SortOrderEnum
}

type WpCommentConnection {
  distinct(field: WpCommentFieldSelector!): [String!]!
  edges: [WpCommentEdge!]!
  group(field: WpCommentFieldSelector!, limit: Int, skip: Int): [WpCommentGroupConnection!]!
  max(field: WpCommentFieldSelector!): Float
  min(field: WpCommentFieldSelector!): Float
  nodes: [WpComment!]!
  pageInfo: PageInfo!
  sum(field: WpCommentFieldSelector!): Float
  totalCount: Int!
}

interface WpCommentConnectionEdgeType implements WpEdgeType {
  """The connected Comment Node"""
  node: WpComment!
}

interface WpCommentConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpCommentConnectionType implements WpConnectionType {
  """A list of connected Comment Nodes"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpCommentConnectionPageInfoType!
}

type WpCommentEdge {
  next: WpComment
  node: WpComment!
  previous: WpComment
}

input WpCommentFieldSelector {
  agent: FieldSelectorEnum
  author: WpCommentToCommenterConnectionEdgeTypeFieldSelector
  authorIp: FieldSelectorEnum
  children: NodeFieldSelector
  commentedOn: WpCommentToContentNodeConnectionEdgeTypeFieldSelector
  content: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  date: FieldSelectorEnum
  dateGmt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  karma: FieldSelectorEnum
  link: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  replies: WpCommentToCommentConnectionTypeFieldSelector
  status: FieldSelectorEnum
  type: FieldSelectorEnum
  uri: FieldSelectorEnum
  wpParent: WpCommentToParentCommentConnectionEdgeTypeFieldSelector
}

input WpCommentFilterInput {
  agent: StringQueryOperatorInput
  author: WpCommentToCommenterConnectionEdgeTypeFilterInput
  authorIp: StringQueryOperatorInput
  children: NodeFilterListInput
  commentedOn: WpCommentToContentNodeConnectionEdgeTypeFilterInput
  content: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  date: DateQueryOperatorInput
  dateGmt: DateQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  karma: IntQueryOperatorInput
  link: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  replies: WpCommentToCommentConnectionTypeFilterInput
  status: WpCommentStatusEnumQueryOperatorInput
  type: StringQueryOperatorInput
  uri: StringQueryOperatorInput
  wpParent: WpCommentToParentCommentConnectionEdgeTypeFilterInput
}

input WpCommentFilterListInput {
  elemMatch: WpCommentFilterInput
}

type WpCommentGroupConnection {
  distinct(field: WpCommentFieldSelector!): [String!]!
  edges: [WpCommentEdge!]!
  field: String!
  fieldValue: String
  group(field: WpCommentFieldSelector!, limit: Int, skip: Int): [WpCommentGroupConnection!]!
  max(field: WpCommentFieldSelector!): Float
  min(field: WpCommentFieldSelector!): Float
  nodes: [WpComment!]!
  pageInfo: PageInfo!
  sum(field: WpCommentFieldSelector!): Float
  totalCount: Int!
}

input WpCommentSortInput {
  agent: SortOrderEnum
  author: WpCommentToCommenterConnectionEdgeTypeSortInput
  authorIp: SortOrderEnum
  children: NodeSortInput
  commentedOn: WpCommentToContentNodeConnectionEdgeTypeSortInput
  content: SortOrderEnum
  databaseId: SortOrderEnum
  date: SortOrderEnum
  dateGmt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  karma: SortOrderEnum
  link: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  replies: WpCommentToCommentConnectionTypeSortInput
  status: SortOrderEnum
  type: SortOrderEnum
  uri: SortOrderEnum
  wpParent: WpCommentToParentCommentConnectionEdgeTypeSortInput
}

"""The status of the comment object."""
enum WpCommentStatusEnum {
  APPROVE
  HOLD
  SPAM
  TRASH
}

input WpCommentStatusEnumQueryOperatorInput {
  eq: WpCommentStatusEnum
  in: [WpCommentStatusEnum]
  ne: WpCommentStatusEnum
  nin: [WpCommentStatusEnum]
}

"""Page Info on the &quot;CommentToCommentConnection&quot;"""
type WpCommentToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpCommentToCommentConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpCommentToCommentConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpCommentToCommentConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Comment type and the Comment type"""
type WpCommentToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpCommentToCommentConnectionPageInfoType!
}

input WpCommentToCommentConnectionTypeFieldSelector {
  nodes: WpCommentFieldSelector
  pageInfo: WpCommentToCommentConnectionPageInfoTypeFieldSelector
}

input WpCommentToCommentConnectionTypeFilterInput {
  nodes: WpCommentFilterListInput
  pageInfo: WpCommentToCommentConnectionPageInfoTypeFilterInput
}

input WpCommentToCommentConnectionTypeSortInput {
  nodes: WpCommentSortInput
  pageInfo: WpCommentToCommentConnectionPageInfoTypeSortInput
}

"""Connection between the Comment type and the Commenter type"""
type WpCommentToCommenterConnectionEdgeType implements WpCommenterConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpCommenter!
}

input WpCommentToCommenterConnectionEdgeTypeFieldSelector {
  node: WpCommenterFieldSelector
}

input WpCommentToCommenterConnectionEdgeTypeFilterInput {
  node: WpCommenterFilterInput
}

input WpCommentToCommenterConnectionEdgeTypeSortInput {
  node: WpCommenterSortInput
}

"""Connection between the Comment type and the ContentNode type"""
type WpCommentToContentNodeConnectionEdgeType implements WpContentNodeConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpContentNode!
}

input WpCommentToContentNodeConnectionEdgeTypeFieldSelector {
  node: WpContentNodeFieldSelector
}

input WpCommentToContentNodeConnectionEdgeTypeFilterInput {
  node: WpContentNodeFilterInput
}

input WpCommentToContentNodeConnectionEdgeTypeSortInput {
  node: WpContentNodeSortInput
}

"""Connection between the Comment type and the Comment type"""
type WpCommentToParentCommentConnectionEdgeType implements WpCommentConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpComment!
}

input WpCommentToParentCommentConnectionEdgeTypeFieldSelector {
  node: WpCommentFieldSelector
}

input WpCommentToParentCommentConnectionEdgeTypeFilterInput {
  node: WpCommentFilterInput
}

input WpCommentToParentCommentConnectionEdgeTypeSortInput {
  node: WpCommentSortInput
}

interface WpCommenter implements Node & WpDatabaseIdentifier & WpNode {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar
  children: [Node!]!

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email address of the author of a comment."""
  email: String
  id: ID!
  internal: Internal!

  """The name of the author of a comment."""
  name: String
  nodeType: String
  parent: Node

  """The url of the author of a comment."""
  url: String
}

type WpCommenterConnection {
  distinct(field: WpCommenterFieldSelector!): [String!]!
  edges: [WpCommenterEdge!]!
  group(field: WpCommenterFieldSelector!, limit: Int, skip: Int): [WpCommenterGroupConnection!]!
  max(field: WpCommenterFieldSelector!): Float
  min(field: WpCommenterFieldSelector!): Float
  nodes: [WpCommenter!]!
  pageInfo: PageInfo!
  sum(field: WpCommenterFieldSelector!): Float
  totalCount: Int!
}

interface WpCommenterConnectionEdgeType implements WpEdgeType {
  """The connected Commenter Node"""
  node: WpCommenter!
}

type WpCommenterEdge {
  next: WpCommenter
  node: WpCommenter!
  previous: WpCommenter
}

input WpCommenterFieldSelector {
  avatar: WpAvatarFieldSelector
  children: NodeFieldSelector
  databaseId: FieldSelectorEnum
  email: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  url: FieldSelectorEnum
}

input WpCommenterFilterInput {
  avatar: WpAvatarFilterInput
  children: NodeFilterListInput
  databaseId: IntQueryOperatorInput
  email: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  url: StringQueryOperatorInput
}

type WpCommenterGroupConnection {
  distinct(field: WpCommenterFieldSelector!): [String!]!
  edges: [WpCommenterEdge!]!
  field: String!
  fieldValue: String
  group(field: WpCommenterFieldSelector!, limit: Int, skip: Int): [WpCommenterGroupConnection!]!
  max(field: WpCommenterFieldSelector!): Float
  min(field: WpCommenterFieldSelector!): Float
  nodes: [WpCommenter!]!
  pageInfo: PageInfo!
  sum(field: WpCommenterFieldSelector!): Float
  totalCount: Int!
}

input WpCommenterSortInput {
  avatar: WpAvatarSortInput
  children: NodeSortInput
  databaseId: SortOrderEnum
  email: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  url: SortOrderEnum
}

type WpConnection {
  distinct(field: WpFieldSelector!): [String!]!
  edges: [WpEdge!]!
  group(field: WpFieldSelector!, limit: Int, skip: Int): [WpGroupConnection!]!
  max(field: WpFieldSelector!): Float
  min(field: WpFieldSelector!): Float
  nodes: [Wp!]!
  pageInfo: PageInfo!
  sum(field: WpFieldSelector!): Float
  totalCount: Int!
}

interface WpConnectionType {
  """A list of connected nodes"""
  nodes: [WpNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpPageInfoType!
}

interface WpContentNode implements Node & WpNode & WpUniformResourceIdentifiable {
  children: [Node!]!

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The ID of the node in the database."""
  databaseId: Int!

  """Post publishing date."""
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The publishing date set in GMT."""
  dateGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  nodeType: String
  parent: Node

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """The unique resource identifier path"""
  uri: String
}

type WpContentNodeConnection {
  distinct(field: WpContentNodeFieldSelector!): [String!]!
  edges: [WpContentNodeEdge!]!
  group(field: WpContentNodeFieldSelector!, limit: Int, skip: Int): [WpContentNodeGroupConnection!]!
  max(field: WpContentNodeFieldSelector!): Float
  min(field: WpContentNodeFieldSelector!): Float
  nodes: [WpContentNode!]!
  pageInfo: PageInfo!
  sum(field: WpContentNodeFieldSelector!): Float
  totalCount: Int!
}

interface WpContentNodeConnectionEdgeType implements WpEdgeType {
  """The connected ContentNode Node"""
  node: WpContentNode!
}

interface WpContentNodeConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpContentNodeConnectionType implements WpConnectionType {
  """A list of connected ContentNode Nodes"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentNodeConnectionPageInfoType!
}

type WpContentNodeEdge {
  next: WpContentNode
  node: WpContentNode!
  previous: WpContentNode
}

input WpContentNodeFieldSelector {
  children: NodeFieldSelector
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFieldSelector
  contentTypeName: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  date: FieldSelectorEnum
  dateGmt: FieldSelectorEnum
  desiredSlug: FieldSelectorEnum
  enclosure: FieldSelectorEnum
  guid: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFieldSelector
  link: FieldSelectorEnum
  modified: FieldSelectorEnum
  modifiedGmt: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
  status: FieldSelectorEnum
  template: WpContentTemplateFieldSelector
  uri: FieldSelectorEnum
}

input WpContentNodeFilterInput {
  children: NodeFilterListInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput
  contentTypeName: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  date: DateQueryOperatorInput
  dateGmt: DateQueryOperatorInput
  desiredSlug: StringQueryOperatorInput
  enclosure: StringQueryOperatorInput
  guid: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput
  link: StringQueryOperatorInput
  modified: DateQueryOperatorInput
  modifiedGmt: DateQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
  status: StringQueryOperatorInput
  template: WpContentTemplateFilterInput
  uri: StringQueryOperatorInput
}

input WpContentNodeFilterListInput {
  elemMatch: WpContentNodeFilterInput
}

type WpContentNodeGroupConnection {
  distinct(field: WpContentNodeFieldSelector!): [String!]!
  edges: [WpContentNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: WpContentNodeFieldSelector!, limit: Int, skip: Int): [WpContentNodeGroupConnection!]!
  max(field: WpContentNodeFieldSelector!): Float
  min(field: WpContentNodeFieldSelector!): Float
  nodes: [WpContentNode!]!
  pageInfo: PageInfo!
  sum(field: WpContentNodeFieldSelector!): Float
  totalCount: Int!
}

input WpContentNodeSortInput {
  children: NodeSortInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeSortInput
  contentTypeName: SortOrderEnum
  databaseId: SortOrderEnum
  date: SortOrderEnum
  dateGmt: SortOrderEnum
  desiredSlug: SortOrderEnum
  enclosure: SortOrderEnum
  guid: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeSortInput
  link: SortOrderEnum
  modified: SortOrderEnum
  modifiedGmt: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
  status: SortOrderEnum
  template: WpContentTemplateSortInput
  uri: SortOrderEnum
}

"""Connection between the ContentNode type and the ContentType type"""
type WpContentNodeToContentTypeConnectionEdgeType implements WpContentTypeConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpContentType!
}

input WpContentNodeToContentTypeConnectionEdgeTypeFieldSelector {
  node: WpContentTypeFieldSelector
}

input WpContentNodeToContentTypeConnectionEdgeTypeFilterInput {
  node: WpContentTypeFilterInput
}

input WpContentNodeToContentTypeConnectionEdgeTypeSortInput {
  node: WpContentTypeSortInput
}

"""Connection between the ContentNode type and the User type"""
type WpContentNodeToEditLastConnectionEdgeType implements WpEdgeType & WpOneToOneConnectionType & WpUserConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpUser!
}

input WpContentNodeToEditLastConnectionEdgeTypeFieldSelector {
  node: WpUserFieldSelector
}

input WpContentNodeToEditLastConnectionEdgeTypeFilterInput {
  node: WpUserFilterInput
}

input WpContentNodeToEditLastConnectionEdgeTypeSortInput {
  node: WpUserSortInput
}

"""Connection between the ContentNode type and the User type"""
type WpContentNodeToEditLockConnectionEdgeType implements WpEdgeType & WpOneToOneConnectionType & WpUserConnectionEdgeType {
  """The timestamp for when the node was last edited"""
  lockTimestamp: String

  """The node of the connection, without the edges"""
  node: WpUser!
}

interface WpContentTemplate {
  """The name of the template"""
  templateName: String
}

input WpContentTemplateFieldSelector {
  templateName: FieldSelectorEnum
}

input WpContentTemplateFilterInput {
  templateName: StringQueryOperatorInput
}

input WpContentTemplateSortInput {
  templateName: SortOrderEnum
}

"""An Post Type object"""
type WpContentType implements Node & WpNode & WpUniformResourceIdentifiable {
  """
  The url path of the first page of the archive page for this content type.
  """
  archivePath: String

  """Whether this content type should can be exported."""
  canExport: Boolean
  children: [Node!]!

  """Connection between the ContentType type and the Taxonomy type"""
  connectedTaxonomies: WpContentTypeToTaxonomyConnectionType

  """Connection between the ContentType type and the ContentNode type"""
  contentNodes: WpContentTypeToContentNodeConnectionType

  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """Description of the content type."""
  description: String

  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean

  """The plural name of the content type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the content type within the GraphQL Schema."""
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """Whether the content type is hierarchical, for example pages."""
  hierarchical: Boolean
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """Display name of the content type."""
  label: String

  """Details about the content type labels."""
  labels: WpPostTypeLabelDetails

  """The name of the icon file to display as a menu icon."""
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String
  nodeType: String
  parent: Node

  """
  Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """Makes this content type available via the admin bar."""
  showInAdminBar: Boolean

  """Whether to add the content type to the GraphQL Schema."""
  showInGraphql: Boolean

  """
  Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that.
  """
  showInMenu: Boolean

  """Makes this content type available for selection in navigation menus."""
  showInNavMenus: Boolean

  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean

  """The unique resource identifier path"""
  uri: String
}

type WpContentTypeConnection {
  distinct(field: WpContentTypeFieldSelector!): [String!]!
  edges: [WpContentTypeEdge!]!
  group(field: WpContentTypeFieldSelector!, limit: Int, skip: Int): [WpContentTypeGroupConnection!]!
  max(field: WpContentTypeFieldSelector!): Float
  min(field: WpContentTypeFieldSelector!): Float
  nodes: [WpContentType!]!
  pageInfo: PageInfo!
  sum(field: WpContentTypeFieldSelector!): Float
  totalCount: Int!
}

interface WpContentTypeConnectionEdgeType implements WpEdgeType {
  """The connected ContentType Node"""
  node: WpContentType!
}

interface WpContentTypeConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpContentTypeConnectionType implements WpConnectionType {
  """A list of connected ContentType Nodes"""
  nodes: [WpContentType!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentTypeConnectionPageInfoType!
}

type WpContentTypeEdge {
  next: WpContentType
  node: WpContentType!
  previous: WpContentType
}

input WpContentTypeFieldSelector {
  archivePath: FieldSelectorEnum
  canExport: FieldSelectorEnum
  children: NodeFieldSelector
  connectedTaxonomies: WpContentTypeToTaxonomyConnectionTypeFieldSelector
  contentNodes: WpContentTypeToContentNodeConnectionTypeFieldSelector
  deleteWithUser: FieldSelectorEnum
  description: FieldSelectorEnum
  excludeFromSearch: FieldSelectorEnum
  graphqlPluralName: FieldSelectorEnum
  graphqlSingleName: FieldSelectorEnum
  hasArchive: FieldSelectorEnum
  hierarchical: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  label: FieldSelectorEnum
  labels: WpPostTypeLabelDetailsFieldSelector
  menuIcon: FieldSelectorEnum
  menuPosition: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  public: FieldSelectorEnum
  publiclyQueryable: FieldSelectorEnum
  restBase: FieldSelectorEnum
  restControllerClass: FieldSelectorEnum
  showInAdminBar: FieldSelectorEnum
  showInGraphql: FieldSelectorEnum
  showInMenu: FieldSelectorEnum
  showInNavMenus: FieldSelectorEnum
  showInRest: FieldSelectorEnum
  showUi: FieldSelectorEnum
  uri: FieldSelectorEnum
}

input WpContentTypeFilterInput {
  archivePath: StringQueryOperatorInput
  canExport: BooleanQueryOperatorInput
  children: NodeFilterListInput
  connectedTaxonomies: WpContentTypeToTaxonomyConnectionTypeFilterInput
  contentNodes: WpContentTypeToContentNodeConnectionTypeFilterInput
  deleteWithUser: BooleanQueryOperatorInput
  description: StringQueryOperatorInput
  excludeFromSearch: BooleanQueryOperatorInput
  graphqlPluralName: StringQueryOperatorInput
  graphqlSingleName: StringQueryOperatorInput
  hasArchive: BooleanQueryOperatorInput
  hierarchical: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  label: StringQueryOperatorInput
  labels: WpPostTypeLabelDetailsFilterInput
  menuIcon: StringQueryOperatorInput
  menuPosition: IntQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  public: BooleanQueryOperatorInput
  publiclyQueryable: BooleanQueryOperatorInput
  restBase: StringQueryOperatorInput
  restControllerClass: StringQueryOperatorInput
  showInAdminBar: BooleanQueryOperatorInput
  showInGraphql: BooleanQueryOperatorInput
  showInMenu: BooleanQueryOperatorInput
  showInNavMenus: BooleanQueryOperatorInput
  showInRest: BooleanQueryOperatorInput
  showUi: BooleanQueryOperatorInput
  uri: StringQueryOperatorInput
}

input WpContentTypeFilterListInput {
  elemMatch: WpContentTypeFilterInput
}

type WpContentTypeGroupConnection {
  distinct(field: WpContentTypeFieldSelector!): [String!]!
  edges: [WpContentTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: WpContentTypeFieldSelector!, limit: Int, skip: Int): [WpContentTypeGroupConnection!]!
  max(field: WpContentTypeFieldSelector!): Float
  min(field: WpContentTypeFieldSelector!): Float
  nodes: [WpContentType!]!
  pageInfo: PageInfo!
  sum(field: WpContentTypeFieldSelector!): Float
  totalCount: Int!
}

input WpContentTypeSortInput {
  archivePath: SortOrderEnum
  canExport: SortOrderEnum
  children: NodeSortInput
  connectedTaxonomies: WpContentTypeToTaxonomyConnectionTypeSortInput
  contentNodes: WpContentTypeToContentNodeConnectionTypeSortInput
  deleteWithUser: SortOrderEnum
  description: SortOrderEnum
  excludeFromSearch: SortOrderEnum
  graphqlPluralName: SortOrderEnum
  graphqlSingleName: SortOrderEnum
  hasArchive: SortOrderEnum
  hierarchical: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  label: SortOrderEnum
  labels: WpPostTypeLabelDetailsSortInput
  menuIcon: SortOrderEnum
  menuPosition: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  public: SortOrderEnum
  publiclyQueryable: SortOrderEnum
  restBase: SortOrderEnum
  restControllerClass: SortOrderEnum
  showInAdminBar: SortOrderEnum
  showInGraphql: SortOrderEnum
  showInMenu: SortOrderEnum
  showInNavMenus: SortOrderEnum
  showInRest: SortOrderEnum
  showUi: SortOrderEnum
  uri: SortOrderEnum
}

"""Page Info on the &quot;ContentTypeToContentNodeConnection&quot;"""
type WpContentTypeToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpContentTypeToContentNodeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpContentTypeToContentNodeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpContentTypeToContentNodeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the ContentType type and the ContentNode type"""
type WpContentTypeToContentNodeConnectionType implements WpConnectionType & WpContentNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentTypeToContentNodeConnectionPageInfoType!
}

input WpContentTypeToContentNodeConnectionTypeFieldSelector {
  nodes: WpContentNodeFieldSelector
  pageInfo: WpContentTypeToContentNodeConnectionPageInfoTypeFieldSelector
}

input WpContentTypeToContentNodeConnectionTypeFilterInput {
  nodes: WpContentNodeFilterListInput
  pageInfo: WpContentTypeToContentNodeConnectionPageInfoTypeFilterInput
}

input WpContentTypeToContentNodeConnectionTypeSortInput {
  nodes: WpContentNodeSortInput
  pageInfo: WpContentTypeToContentNodeConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;ContentTypeToTaxonomyConnection&quot;"""
type WpContentTypeToTaxonomyConnectionPageInfoType implements WpPageInfoType & WpTaxonomyConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpContentTypeToTaxonomyConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpContentTypeToTaxonomyConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpContentTypeToTaxonomyConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the ContentType type and the Taxonomy type"""
type WpContentTypeToTaxonomyConnectionType implements WpConnectionType & WpTaxonomyConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTaxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentTypeToTaxonomyConnectionPageInfoType!
}

input WpContentTypeToTaxonomyConnectionTypeFieldSelector {
  nodes: WpTaxonomyFieldSelector
  pageInfo: WpContentTypeToTaxonomyConnectionPageInfoTypeFieldSelector
}

input WpContentTypeToTaxonomyConnectionTypeFilterInput {
  nodes: WpTaxonomyFilterListInput
  pageInfo: WpContentTypeToTaxonomyConnectionPageInfoTypeFilterInput
}

input WpContentTypeToTaxonomyConnectionTypeSortInput {
  nodes: WpTaxonomySortInput
  pageInfo: WpContentTypeToTaxonomyConnectionPageInfoTypeSortInput
}

interface WpDatabaseIdentifier {
  """The unique identifier stored in the database"""
  databaseId: Int!
}

"""The template assigned to the node"""
type WpDefaultTemplate implements WpContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The discussion setting type"""
type WpDiscussionSettings {
  """Allow people to submit comments on new posts."""
  defaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String
}

input WpDiscussionSettingsFieldSelector {
  defaultCommentStatus: FieldSelectorEnum
  defaultPingStatus: FieldSelectorEnum
}

input WpDiscussionSettingsFilterInput {
  defaultCommentStatus: StringQueryOperatorInput
  defaultPingStatus: StringQueryOperatorInput
}

input WpDiscussionSettingsSortInput {
  defaultCommentStatus: SortOrderEnum
  defaultPingStatus: SortOrderEnum
}

type WpEdge {
  next: Wp
  node: Wp!
  previous: Wp
}

interface WpEdgeType {
  """The connected node"""
  node: WpNode!
}

input WpFieldSelector {
  allSettings: WpSettingsFieldSelector
  children: NodeFieldSelector
  discussionSettings: WpDiscussionSettingsFieldSelector
  generalSettings: WpGeneralSettingsFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  readingSettings: WpReadingSettingsFieldSelector
  wpGatsby: WpWPGatsbyFieldSelector
  writingSettings: WpWritingSettingsFieldSelector
}

input WpFilterInput {
  allSettings: WpSettingsFilterInput
  children: NodeFilterListInput
  discussionSettings: WpDiscussionSettingsFilterInput
  generalSettings: WpGeneralSettingsFilterInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  readingSettings: WpReadingSettingsFilterInput
  wpGatsby: WpWPGatsbyFilterInput
  writingSettings: WpWritingSettingsFilterInput
}

"""The general setting type"""
type WpGeneralSettings {
  """A date format for all date strings."""
  dateFormat: String

  """Site tagline."""
  description: String

  """This address is used for admin purposes, like new user notification."""
  email: String

  """WordPress locale code."""
  language: String

  """A day number of the week that the week should start on."""
  startOfWeek: Int

  """A time format for all time strings."""
  timeFormat: String

  """A city in the same timezone as you."""
  timezone: String

  """Site title."""
  title: String

  """Site URL."""
  url: String
}

input WpGeneralSettingsFieldSelector {
  dateFormat: FieldSelectorEnum
  description: FieldSelectorEnum
  email: FieldSelectorEnum
  language: FieldSelectorEnum
  startOfWeek: FieldSelectorEnum
  timeFormat: FieldSelectorEnum
  timezone: FieldSelectorEnum
  title: FieldSelectorEnum
  url: FieldSelectorEnum
}

input WpGeneralSettingsFilterInput {
  dateFormat: StringQueryOperatorInput
  description: StringQueryOperatorInput
  email: StringQueryOperatorInput
  language: StringQueryOperatorInput
  startOfWeek: IntQueryOperatorInput
  timeFormat: StringQueryOperatorInput
  timezone: StringQueryOperatorInput
  title: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input WpGeneralSettingsSortInput {
  dateFormat: SortOrderEnum
  description: SortOrderEnum
  email: SortOrderEnum
  language: SortOrderEnum
  startOfWeek: SortOrderEnum
  timeFormat: SortOrderEnum
  timezone: SortOrderEnum
  title: SortOrderEnum
  url: SortOrderEnum
}

type WpGroupConnection {
  distinct(field: WpFieldSelector!): [String!]!
  edges: [WpEdge!]!
  field: String!
  fieldValue: String
  group(field: WpFieldSelector!, limit: Int, skip: Int): [WpGroupConnection!]!
  max(field: WpFieldSelector!): Float
  min(field: WpFieldSelector!): Float
  nodes: [Wp!]!
  pageInfo: PageInfo!
  sum(field: WpFieldSelector!): Float
  totalCount: Int!
}

interface WpHierarchicalContentNode implements Node & WpContentNode & WpDatabaseIdentifier & WpHierarchicalNode & WpNode & WpUniformResourceIdentifiable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionType
  children: [Node!]!

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The publishing date set in GMT."""
  dateGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  nodeType: String
  parent: Node

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """The unique resource identifier path"""
  uri: String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionType

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType
}

type WpHierarchicalContentNodeConnection {
  distinct(field: WpHierarchicalContentNodeFieldSelector!): [String!]!
  edges: [WpHierarchicalContentNodeEdge!]!
  group(field: WpHierarchicalContentNodeFieldSelector!, limit: Int, skip: Int): [WpHierarchicalContentNodeGroupConnection!]!
  max(field: WpHierarchicalContentNodeFieldSelector!): Float
  min(field: WpHierarchicalContentNodeFieldSelector!): Float
  nodes: [WpHierarchicalContentNode!]!
  pageInfo: PageInfo!
  sum(field: WpHierarchicalContentNodeFieldSelector!): Float
  totalCount: Int!
}

type WpHierarchicalContentNodeEdge {
  next: WpHierarchicalContentNode
  node: WpHierarchicalContentNode!
  previous: WpHierarchicalContentNode
}

input WpHierarchicalContentNodeFieldSelector {
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFieldSelector
  children: NodeFieldSelector
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFieldSelector
  contentTypeName: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  date: FieldSelectorEnum
  dateGmt: FieldSelectorEnum
  desiredSlug: FieldSelectorEnum
  enclosure: FieldSelectorEnum
  guid: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFieldSelector
  link: FieldSelectorEnum
  modified: FieldSelectorEnum
  modifiedGmt: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  slug: FieldSelectorEnum
  status: FieldSelectorEnum
  template: WpContentTemplateFieldSelector
  uri: FieldSelectorEnum
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFieldSelector
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFieldSelector
}

input WpHierarchicalContentNodeFilterInput {
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput
  children: NodeFilterListInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput
  contentTypeName: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  date: DateQueryOperatorInput
  dateGmt: DateQueryOperatorInput
  desiredSlug: StringQueryOperatorInput
  enclosure: StringQueryOperatorInput
  guid: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput
  link: StringQueryOperatorInput
  modified: DateQueryOperatorInput
  modifiedGmt: DateQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  slug: StringQueryOperatorInput
  status: StringQueryOperatorInput
  template: WpContentTemplateFilterInput
  uri: StringQueryOperatorInput
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput
}

type WpHierarchicalContentNodeGroupConnection {
  distinct(field: WpHierarchicalContentNodeFieldSelector!): [String!]!
  edges: [WpHierarchicalContentNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: WpHierarchicalContentNodeFieldSelector!, limit: Int, skip: Int): [WpHierarchicalContentNodeGroupConnection!]!
  max(field: WpHierarchicalContentNodeFieldSelector!): Float
  min(field: WpHierarchicalContentNodeFieldSelector!): Float
  nodes: [WpHierarchicalContentNode!]!
  pageInfo: PageInfo!
  sum(field: WpHierarchicalContentNodeFieldSelector!): Float
  totalCount: Int!
}

input WpHierarchicalContentNodeSortInput {
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeSortInput
  children: NodeSortInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeSortInput
  contentTypeName: SortOrderEnum
  databaseId: SortOrderEnum
  date: SortOrderEnum
  dateGmt: SortOrderEnum
  desiredSlug: SortOrderEnum
  enclosure: SortOrderEnum
  guid: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeSortInput
  link: SortOrderEnum
  modified: SortOrderEnum
  modifiedGmt: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  slug: SortOrderEnum
  status: SortOrderEnum
  template: WpContentTemplateSortInput
  uri: SortOrderEnum
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeSortInput
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeSortInput
}

"""
Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot;
"""
type WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToContentNodeAncestorsConnectionType implements WpConnectionType & WpContentNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoType!
}

input WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFieldSelector {
  nodes: WpContentNodeFieldSelector
  pageInfo: WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoTypeFieldSelector
}

input WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput {
  nodes: WpContentNodeFilterListInput
  pageInfo: WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoTypeFilterInput
}

input WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeSortInput {
  nodes: WpContentNodeSortInput
  pageInfo: WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoTypeSortInput
}

"""
Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot;
"""
type WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToContentNodeChildrenConnectionType implements WpConnectionType & WpContentNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoType!
}

input WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFieldSelector {
  nodes: WpContentNodeFieldSelector
  pageInfo: WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoTypeFieldSelector
}

input WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput {
  nodes: WpContentNodeFilterListInput
  pageInfo: WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoTypeFilterInput
}

input WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeSortInput {
  nodes: WpContentNodeSortInput
  pageInfo: WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoTypeSortInput
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType implements WpContentNodeConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpContentNode!
}

input WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFieldSelector {
  node: WpContentNodeFieldSelector
}

input WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput {
  node: WpContentNodeFilterInput
}

input WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeSortInput {
  node: WpContentNodeSortInput
}

interface WpHierarchicalNode implements Node & WpDatabaseIdentifier & WpNode {
  children: [Node!]!

  """The unique identifier stored in the database"""
  databaseId: Int!
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

type WpHierarchicalNodeConnection {
  distinct(field: WpHierarchicalNodeFieldSelector!): [String!]!
  edges: [WpHierarchicalNodeEdge!]!
  group(field: WpHierarchicalNodeFieldSelector!, limit: Int, skip: Int): [WpHierarchicalNodeGroupConnection!]!
  max(field: WpHierarchicalNodeFieldSelector!): Float
  min(field: WpHierarchicalNodeFieldSelector!): Float
  nodes: [WpHierarchicalNode!]!
  pageInfo: PageInfo!
  sum(field: WpHierarchicalNodeFieldSelector!): Float
  totalCount: Int!
}

type WpHierarchicalNodeEdge {
  next: WpHierarchicalNode
  node: WpHierarchicalNode!
  previous: WpHierarchicalNode
}

input WpHierarchicalNodeFieldSelector {
  children: NodeFieldSelector
  databaseId: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
}

input WpHierarchicalNodeFilterInput {
  children: NodeFilterListInput
  databaseId: IntQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
}

type WpHierarchicalNodeGroupConnection {
  distinct(field: WpHierarchicalNodeFieldSelector!): [String!]!
  edges: [WpHierarchicalNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: WpHierarchicalNodeFieldSelector!, limit: Int, skip: Int): [WpHierarchicalNodeGroupConnection!]!
  max(field: WpHierarchicalNodeFieldSelector!): Float
  min(field: WpHierarchicalNodeFieldSelector!): Float
  nodes: [WpHierarchicalNode!]!
  pageInfo: PageInfo!
  sum(field: WpHierarchicalNodeFieldSelector!): Float
  totalCount: Int!
}

input WpHierarchicalNodeSortInput {
  children: NodeSortInput
  databaseId: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
}

interface WpHierarchicalTermNode implements Node & WpDatabaseIdentifier & WpHierarchicalNode & WpNode & WpTermNode & WpUniformResourceIdentifiable {
  children: [Node!]!

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String
  nodeType: String
  parent: Node

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

type WpHierarchicalTermNodeConnection {
  distinct(field: WpHierarchicalTermNodeFieldSelector!): [String!]!
  edges: [WpHierarchicalTermNodeEdge!]!
  group(field: WpHierarchicalTermNodeFieldSelector!, limit: Int, skip: Int): [WpHierarchicalTermNodeGroupConnection!]!
  max(field: WpHierarchicalTermNodeFieldSelector!): Float
  min(field: WpHierarchicalTermNodeFieldSelector!): Float
  nodes: [WpHierarchicalTermNode!]!
  pageInfo: PageInfo!
  sum(field: WpHierarchicalTermNodeFieldSelector!): Float
  totalCount: Int!
}

type WpHierarchicalTermNodeEdge {
  next: WpHierarchicalTermNode
  node: WpHierarchicalTermNode!
  previous: WpHierarchicalTermNode
}

input WpHierarchicalTermNodeFieldSelector {
  children: NodeFieldSelector
  count: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  link: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  slug: FieldSelectorEnum
  taxonomyName: FieldSelectorEnum
  termGroupId: FieldSelectorEnum
  termTaxonomyId: FieldSelectorEnum
  uri: FieldSelectorEnum
}

input WpHierarchicalTermNodeFilterInput {
  children: NodeFilterListInput
  count: IntQueryOperatorInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  link: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  slug: StringQueryOperatorInput
  taxonomyName: StringQueryOperatorInput
  termGroupId: IntQueryOperatorInput
  termTaxonomyId: IntQueryOperatorInput
  uri: StringQueryOperatorInput
}

type WpHierarchicalTermNodeGroupConnection {
  distinct(field: WpHierarchicalTermNodeFieldSelector!): [String!]!
  edges: [WpHierarchicalTermNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: WpHierarchicalTermNodeFieldSelector!, limit: Int, skip: Int): [WpHierarchicalTermNodeGroupConnection!]!
  max(field: WpHierarchicalTermNodeFieldSelector!): Float
  min(field: WpHierarchicalTermNodeFieldSelector!): Float
  nodes: [WpHierarchicalTermNode!]!
  pageInfo: PageInfo!
  sum(field: WpHierarchicalTermNodeFieldSelector!): Float
  totalCount: Int!
}

input WpHierarchicalTermNodeSortInput {
  children: NodeSortInput
  count: SortOrderEnum
  databaseId: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  link: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  slug: SortOrderEnum
  taxonomyName: SortOrderEnum
  termGroupId: SortOrderEnum
  termTaxonomyId: SortOrderEnum
  uri: SortOrderEnum
}

"""File details for a Media Item"""
type WpMediaDetails {
  """The filename of the mediaItem"""
  file: String

  """The height of the mediaItem"""
  height: Int

  """Meta information associated with the mediaItem"""
  meta: WpMediaItemMeta

  """The available sizes of the mediaItem"""
  sizes: [WpMediaSize]

  """The width of the mediaItem"""
  width: Int
}

input WpMediaDetailsFieldSelector {
  file: FieldSelectorEnum
  height: FieldSelectorEnum
  meta: WpMediaItemMetaFieldSelector
  sizes: WpMediaSizeFieldSelector
  width: FieldSelectorEnum
}

input WpMediaDetailsFilterInput {
  file: StringQueryOperatorInput
  height: IntQueryOperatorInput
  meta: WpMediaItemMetaFilterInput
  sizes: WpMediaSizeFilterListInput
  width: IntQueryOperatorInput
}

input WpMediaDetailsSortInput {
  file: SortOrderEnum
  height: SortOrderEnum
  meta: WpMediaItemMetaSortInput
  sizes: WpMediaSizeSortInput
  width: SortOrderEnum
}

"""The mediaItem type"""
type WpMediaItem implements Node & RemoteFile & WpContentNode & WpDatabaseIdentifier & WpHierarchicalContentNode & WpHierarchicalNode & WpNode & WpNodeWithAuthor & WpNodeWithComments & WpNodeWithTemplate & WpNodeWithTitle & WpUniformResourceIdentifiable {
  """Alternative text to display when resource is not displayed"""
  altText: String

  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionType

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The caption for the resource"""
  caption: String
  children: [Node!]!

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the MediaItem type and the Comment type"""
  comments: WpMediaItemToCommentConnectionType

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The publishing date set in GMT."""
  dateGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """Description of the image (stored as post_content)"""
  description: String

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """The filesize in bytes of the resource"""
  fileSize: Int
  filename: String!
  filesize: Int

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    "\nIf set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.\nIf neither width or height is provided, height will be set based on the intrinsic width of the source image.\n"
    aspectRatio: Float

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String

    "\nSpecifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,\nbased on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].\nIt will never generate any images larger than the source.\n"
    breakpoints: [Int] = [750, 1080, 1366, 1920]
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored.\n"
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    "\nIf set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
    height: Int

    "\nThe layout for the image.\nFIXED: A static image sized, that does not resize according to the screen width\nFULL_WIDTH: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\nCONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n"
    layout: RemoteFileLayout = CONSTRAINED

    "\nA list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.\nDefault is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.\n"
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    "\nFormat of generated placeholder image, displayed while the main image loads.\nBLURRED: a blurred, low resolution image, encoded as a base64 data URI\nDOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).\nTRACED_SVG: deprecated. Will use DOMINANT_COLOR.\nNONE: no placeholder. Set the argument \"backgroundColor\" to use a fixed background color."
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR
    quality: Int = 75

    "\nThe \"sizes\" property, passed to the img tag. This describes the display size of the image.\nThis does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image\ncontainer will be the full width of the screen. In these cases we will generate an appropriate value.\n"
    sizes: String

    "\nThe display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.\nThe actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities\nIgnored if layout = FLUID.\n"
    width: Int
  ): GatsbyImageData

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  height: Int
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String
  localFile: File

  """Details about the mediaItem"""
  mediaDetails: WpMediaDetails

  """Url of the mediaItem"""
  mediaItemUrl: String

  """Type of resource"""
  mediaType: String
  mimeType: String!

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  nodeType: String
  parent: Node

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
  publicUrl: String!
  resize(
    aspectRatio: Float
    cropFocus: [RemoteFileCropFocus]
    fit: RemoteFileFit = COVER

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored."
    format: RemoteFileFormat = AUTO
    height: Int
    quality: Int = 75
    width: Int
  ): RemoteFileResize

  """The sizes attribute value for an image."""
  sizes: String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """Url of the mediaItem"""
  sourceUrl: String

  """
  The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths.
  """
  srcSet: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String
  width: Int

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionType

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType
}

type WpMediaItemConnection {
  distinct(field: WpMediaItemFieldSelector!): [String!]!
  edges: [WpMediaItemEdge!]!
  group(field: WpMediaItemFieldSelector!, limit: Int, skip: Int): [WpMediaItemGroupConnection!]!
  max(field: WpMediaItemFieldSelector!): Float
  min(field: WpMediaItemFieldSelector!): Float
  nodes: [WpMediaItem!]!
  pageInfo: PageInfo!
  sum(field: WpMediaItemFieldSelector!): Float
  totalCount: Int!
}

interface WpMediaItemConnectionEdgeType implements WpEdgeType {
  """The connected mediaItem Node"""
  node: WpMediaItem!
}

interface WpMediaItemConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpMediaItemConnectionType implements WpConnectionType {
  """A list of connected mediaItem Nodes"""
  nodes: [WpMediaItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMediaItemConnectionPageInfoType!
}

type WpMediaItemEdge {
  next: WpMediaItem
  node: WpMediaItem!
  previous: WpMediaItem
}

input WpMediaItemFieldSelector {
  altText: FieldSelectorEnum
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFieldSelector
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFieldSelector
  authorDatabaseId: FieldSelectorEnum
  authorId: FieldSelectorEnum
  caption: FieldSelectorEnum
  children: NodeFieldSelector
  commentCount: FieldSelectorEnum
  commentStatus: FieldSelectorEnum
  comments: WpMediaItemToCommentConnectionTypeFieldSelector
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFieldSelector
  contentTypeName: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  date: FieldSelectorEnum
  dateGmt: FieldSelectorEnum
  description: FieldSelectorEnum
  desiredSlug: FieldSelectorEnum
  enclosure: FieldSelectorEnum
  fileSize: FieldSelectorEnum
  filename: FieldSelectorEnum
  filesize: FieldSelectorEnum
  gatsbyImage: FieldSelectorEnum
  guid: FieldSelectorEnum
  height: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFieldSelector
  link: FieldSelectorEnum
  localFile: FileFieldSelector
  mediaDetails: WpMediaDetailsFieldSelector
  mediaItemUrl: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  mimeType: FieldSelectorEnum
  modified: FieldSelectorEnum
  modifiedGmt: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  publicUrl: FieldSelectorEnum
  resize: RemoteFileResizeFieldSelector
  sizes: FieldSelectorEnum
  slug: FieldSelectorEnum
  sourceUrl: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  status: FieldSelectorEnum
  template: WpContentTemplateFieldSelector
  title: FieldSelectorEnum
  uri: FieldSelectorEnum
  width: FieldSelectorEnum
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFieldSelector
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFieldSelector
}

input WpMediaItemFilterInput {
  altText: StringQueryOperatorInput
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput
  authorDatabaseId: IntQueryOperatorInput
  authorId: IDQueryOperatorInput
  caption: StringQueryOperatorInput
  children: NodeFilterListInput
  commentCount: IntQueryOperatorInput
  commentStatus: StringQueryOperatorInput
  comments: WpMediaItemToCommentConnectionTypeFilterInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput
  contentTypeName: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  date: DateQueryOperatorInput
  dateGmt: DateQueryOperatorInput
  description: StringQueryOperatorInput
  desiredSlug: StringQueryOperatorInput
  enclosure: StringQueryOperatorInput
  fileSize: IntQueryOperatorInput
  filename: StringQueryOperatorInput
  filesize: IntQueryOperatorInput
  gatsbyImage: GatsbyImageDataQueryOperatorInput
  guid: StringQueryOperatorInput
  height: IntQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput
  link: StringQueryOperatorInput
  localFile: FileFilterInput
  mediaDetails: WpMediaDetailsFilterInput
  mediaItemUrl: StringQueryOperatorInput
  mediaType: StringQueryOperatorInput
  mimeType: StringQueryOperatorInput
  modified: DateQueryOperatorInput
  modifiedGmt: DateQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  publicUrl: StringQueryOperatorInput
  resize: RemoteFileResizeFilterInput
  sizes: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  sourceUrl: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  status: StringQueryOperatorInput
  template: WpContentTemplateFilterInput
  title: StringQueryOperatorInput
  uri: StringQueryOperatorInput
  width: IntQueryOperatorInput
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput
}

type WpMediaItemGroupConnection {
  distinct(field: WpMediaItemFieldSelector!): [String!]!
  edges: [WpMediaItemEdge!]!
  field: String!
  fieldValue: String
  group(field: WpMediaItemFieldSelector!, limit: Int, skip: Int): [WpMediaItemGroupConnection!]!
  max(field: WpMediaItemFieldSelector!): Float
  min(field: WpMediaItemFieldSelector!): Float
  nodes: [WpMediaItem!]!
  pageInfo: PageInfo!
  sum(field: WpMediaItemFieldSelector!): Float
  totalCount: Int!
}

"""Meta connected to a MediaItem"""
type WpMediaItemMeta {
  """Aperture measurement of the media item."""
  aperture: Float

  """Information about the camera used to create the media item."""
  camera: String

  """The text string description associated with the media item."""
  caption: String

  """Copyright information associated with the media item."""
  copyright: String

  """The date/time when the media was created."""
  createdTimestamp: Int

  """The original creator of the media item."""
  credit: String

  """The focal length value of the media item."""
  focalLength: Float

  """
  The ISO (International Organization for Standardization) value of the media item.
  """
  iso: Int

  """List of keywords used to describe or identfy the media item."""
  keywords: [String]

  """The vertical or horizontal aspect of the media item."""
  orientation: String

  """The shutter speed information of the media item."""
  shutterSpeed: Float

  """A useful title for the media item."""
  title: String
}

input WpMediaItemMetaFieldSelector {
  aperture: FieldSelectorEnum
  camera: FieldSelectorEnum
  caption: FieldSelectorEnum
  copyright: FieldSelectorEnum
  createdTimestamp: FieldSelectorEnum
  credit: FieldSelectorEnum
  focalLength: FieldSelectorEnum
  iso: FieldSelectorEnum
  keywords: FieldSelectorEnum
  orientation: FieldSelectorEnum
  shutterSpeed: FieldSelectorEnum
  title: FieldSelectorEnum
}

input WpMediaItemMetaFilterInput {
  aperture: FloatQueryOperatorInput
  camera: StringQueryOperatorInput
  caption: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  createdTimestamp: IntQueryOperatorInput
  credit: StringQueryOperatorInput
  focalLength: FloatQueryOperatorInput
  iso: IntQueryOperatorInput
  keywords: StringQueryOperatorInput
  orientation: StringQueryOperatorInput
  shutterSpeed: FloatQueryOperatorInput
  title: StringQueryOperatorInput
}

input WpMediaItemMetaSortInput {
  aperture: SortOrderEnum
  camera: SortOrderEnum
  caption: SortOrderEnum
  copyright: SortOrderEnum
  createdTimestamp: SortOrderEnum
  credit: SortOrderEnum
  focalLength: SortOrderEnum
  iso: SortOrderEnum
  keywords: SortOrderEnum
  orientation: SortOrderEnum
  shutterSpeed: SortOrderEnum
  title: SortOrderEnum
}

input WpMediaItemSortInput {
  altText: SortOrderEnum
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeSortInput
  author: WpNodeWithAuthorToUserConnectionEdgeTypeSortInput
  authorDatabaseId: SortOrderEnum
  authorId: SortOrderEnum
  caption: SortOrderEnum
  children: NodeSortInput
  commentCount: SortOrderEnum
  commentStatus: SortOrderEnum
  comments: WpMediaItemToCommentConnectionTypeSortInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeSortInput
  contentTypeName: SortOrderEnum
  databaseId: SortOrderEnum
  date: SortOrderEnum
  dateGmt: SortOrderEnum
  description: SortOrderEnum
  desiredSlug: SortOrderEnum
  enclosure: SortOrderEnum
  fileSize: SortOrderEnum
  filename: SortOrderEnum
  filesize: SortOrderEnum
  gatsbyImage: SortOrderEnum
  guid: SortOrderEnum
  height: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeSortInput
  link: SortOrderEnum
  localFile: FileSortInput
  mediaDetails: WpMediaDetailsSortInput
  mediaItemUrl: SortOrderEnum
  mediaType: SortOrderEnum
  mimeType: SortOrderEnum
  modified: SortOrderEnum
  modifiedGmt: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  publicUrl: SortOrderEnum
  resize: RemoteFileResizeSortInput
  sizes: SortOrderEnum
  slug: SortOrderEnum
  sourceUrl: SortOrderEnum
  srcSet: SortOrderEnum
  status: SortOrderEnum
  template: WpContentTemplateSortInput
  title: SortOrderEnum
  uri: SortOrderEnum
  width: SortOrderEnum
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeSortInput
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeSortInput
}

"""Page Info on the &quot;MediaItemToCommentConnection&quot;"""
type WpMediaItemToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpMediaItemToCommentConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpMediaItemToCommentConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpMediaItemToCommentConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the MediaItem type and the Comment type"""
type WpMediaItemToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpMediaItemToCommentConnectionPageInfoType!
}

input WpMediaItemToCommentConnectionTypeFieldSelector {
  nodes: WpCommentFieldSelector
  pageInfo: WpMediaItemToCommentConnectionPageInfoTypeFieldSelector
}

input WpMediaItemToCommentConnectionTypeFilterInput {
  nodes: WpCommentFilterListInput
  pageInfo: WpMediaItemToCommentConnectionPageInfoTypeFilterInput
}

input WpMediaItemToCommentConnectionTypeSortInput {
  nodes: WpCommentSortInput
  pageInfo: WpMediaItemToCommentConnectionPageInfoTypeSortInput
}

"""Details of an available size for a media item"""
type WpMediaSize {
  """The filename of the referenced size"""
  file: String

  """The filesize of the resource"""
  fileSize: Int

  """The height of the referenced size"""
  height: String

  """The mime type of the referenced size"""
  mimeType: String

  """The referenced size name"""
  name: String

  """The url of the referenced size"""
  sourceUrl: String

  """The width of the referenced size"""
  width: String
}

input WpMediaSizeFieldSelector {
  file: FieldSelectorEnum
  fileSize: FieldSelectorEnum
  height: FieldSelectorEnum
  mimeType: FieldSelectorEnum
  name: FieldSelectorEnum
  sourceUrl: FieldSelectorEnum
  width: FieldSelectorEnum
}

input WpMediaSizeFilterInput {
  file: StringQueryOperatorInput
  fileSize: IntQueryOperatorInput
  height: StringQueryOperatorInput
  mimeType: StringQueryOperatorInput
  name: StringQueryOperatorInput
  sourceUrl: StringQueryOperatorInput
  width: StringQueryOperatorInput
}

input WpMediaSizeFilterListInput {
  elemMatch: WpMediaSizeFilterInput
}

input WpMediaSizeSortInput {
  file: SortOrderEnum
  fileSize: SortOrderEnum
  height: SortOrderEnum
  mimeType: SortOrderEnum
  name: SortOrderEnum
  sourceUrl: SortOrderEnum
  width: SortOrderEnum
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme.
"""
type WpMenu implements Node & WpDatabaseIdentifier & WpNode {
  children: [Node!]!

  """The number of items in the menu"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!
  id: ID!
  internal: Internal!

  """The locations a menu is assigned to"""
  locations: [WpMenuLocationEnum]

  """Connection between the Menu type and the MenuItem type"""
  menuItems: WpMenuToMenuItemConnectionType

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String
  nodeType: String
  parent: Node

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String
}

type WpMenuConnection {
  distinct(field: WpMenuFieldSelector!): [String!]!
  edges: [WpMenuEdge!]!
  group(field: WpMenuFieldSelector!, limit: Int, skip: Int): [WpMenuGroupConnection!]!
  max(field: WpMenuFieldSelector!): Float
  min(field: WpMenuFieldSelector!): Float
  nodes: [WpMenu!]!
  pageInfo: PageInfo!
  sum(field: WpMenuFieldSelector!): Float
  totalCount: Int!
}

interface WpMenuConnectionEdgeType implements WpEdgeType {
  """The connected Menu Node"""
  node: WpMenu!
}

interface WpMenuConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpMenuConnectionType implements WpConnectionType {
  """A list of connected Menu Nodes"""
  nodes: [WpMenu!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuConnectionPageInfoType!
}

type WpMenuEdge {
  next: WpMenu
  node: WpMenu!
  previous: WpMenu
}

input WpMenuFieldSelector {
  children: NodeFieldSelector
  count: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  locations: FieldSelectorEnum
  menuItems: WpMenuToMenuItemConnectionTypeFieldSelector
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
}

input WpMenuFilterInput {
  children: NodeFilterListInput
  count: IntQueryOperatorInput
  databaseId: IntQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  locations: WpMenuLocationEnumQueryOperatorInput
  menuItems: WpMenuToMenuItemConnectionTypeFilterInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
}

type WpMenuGroupConnection {
  distinct(field: WpMenuFieldSelector!): [String!]!
  edges: [WpMenuEdge!]!
  field: String!
  fieldValue: String
  group(field: WpMenuFieldSelector!, limit: Int, skip: Int): [WpMenuGroupConnection!]!
  max(field: WpMenuFieldSelector!): Float
  min(field: WpMenuFieldSelector!): Float
  nodes: [WpMenu!]!
  pageInfo: PageInfo!
  sum(field: WpMenuFieldSelector!): Float
  totalCount: Int!
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type WpMenuItem implements Node & WpDatabaseIdentifier & WpNode {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems: WpMenuItemToMenuItemConnectionType
  children: [Node!]!

  """Connection from MenuItem to it&#039;s connected node"""
  connectedNode: WpMenuItemToMenuItemLinkableConnectionEdgeType

  """Class attribute for the menu item link"""
  cssClasses: [String]

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Description of the menu item."""
  description: String
  id: ID!
  internal: Internal!

  """Label or title of the menu item."""
  label: String

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String

  """The locations the menu item&#039;s Menu is assigned to"""
  locations: [WpMenuLocationEnum]

  """The Menu a MenuItem is part of"""
  menu: WpMenuItemToMenuConnectionEdgeType
  nodeType: String

  """Menu item order"""
  order: Int
  parent: Node

  """The database id of the parent menu item or null if it is the root"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent nav menu item object."""
  parentId: ID

  """
  Path for the resource. Relative path for internal resources. Absolute path for external resources.
  """
  path: String

  """Target attribute for the menu item link."""
  target: String

  """Title attribute for the menu item link"""
  title: String

  """The uri of the resource the menu item links to"""
  uri: String

  """URL or destination of the menu item."""
  url: String
}

type WpMenuItemConnection {
  distinct(field: WpMenuItemFieldSelector!): [String!]!
  edges: [WpMenuItemEdge!]!
  group(field: WpMenuItemFieldSelector!, limit: Int, skip: Int): [WpMenuItemGroupConnection!]!
  max(field: WpMenuItemFieldSelector!): Float
  min(field: WpMenuItemFieldSelector!): Float
  nodes: [WpMenuItem!]!
  pageInfo: PageInfo!
  sum(field: WpMenuItemFieldSelector!): Float
  totalCount: Int!
}

interface WpMenuItemConnectionEdgeType implements WpEdgeType {
  """The connected MenuItem Node"""
  node: WpMenuItem!
}

interface WpMenuItemConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpMenuItemConnectionType implements WpConnectionType {
  """A list of connected MenuItem Nodes"""
  nodes: [WpMenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuItemConnectionPageInfoType!
}

type WpMenuItemEdge {
  next: WpMenuItem
  node: WpMenuItem!
  previous: WpMenuItem
}

input WpMenuItemFieldSelector {
  childItems: WpMenuItemToMenuItemConnectionTypeFieldSelector
  children: NodeFieldSelector
  connectedNode: WpMenuItemToMenuItemLinkableConnectionEdgeTypeFieldSelector
  cssClasses: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  label: FieldSelectorEnum
  linkRelationship: FieldSelectorEnum
  locations: FieldSelectorEnum
  menu: WpMenuItemToMenuConnectionEdgeTypeFieldSelector
  nodeType: FieldSelectorEnum
  order: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  path: FieldSelectorEnum
  target: FieldSelectorEnum
  title: FieldSelectorEnum
  uri: FieldSelectorEnum
  url: FieldSelectorEnum
}

input WpMenuItemFilterInput {
  childItems: WpMenuItemToMenuItemConnectionTypeFilterInput
  children: NodeFilterListInput
  connectedNode: WpMenuItemToMenuItemLinkableConnectionEdgeTypeFilterInput
  cssClasses: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  label: StringQueryOperatorInput
  linkRelationship: StringQueryOperatorInput
  locations: WpMenuLocationEnumQueryOperatorInput
  menu: WpMenuItemToMenuConnectionEdgeTypeFilterInput
  nodeType: StringQueryOperatorInput
  order: IntQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  path: StringQueryOperatorInput
  target: StringQueryOperatorInput
  title: StringQueryOperatorInput
  uri: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input WpMenuItemFilterListInput {
  elemMatch: WpMenuItemFilterInput
}

type WpMenuItemGroupConnection {
  distinct(field: WpMenuItemFieldSelector!): [String!]!
  edges: [WpMenuItemEdge!]!
  field: String!
  fieldValue: String
  group(field: WpMenuItemFieldSelector!, limit: Int, skip: Int): [WpMenuItemGroupConnection!]!
  max(field: WpMenuItemFieldSelector!): Float
  min(field: WpMenuItemFieldSelector!): Float
  nodes: [WpMenuItem!]!
  pageInfo: PageInfo!
  sum(field: WpMenuItemFieldSelector!): Float
  totalCount: Int!
}

interface WpMenuItemLinkable implements Node & WpDatabaseIdentifier & WpNode & WpUniformResourceIdentifiable {
  children: [Node!]!

  """The unique identifier stored in the database"""
  databaseId: Int!
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!
  nodeType: String
  parent: Node

  """The unique resource identifier path"""
  uri: String
}

type WpMenuItemLinkableConnection {
  distinct(field: WpMenuItemLinkableFieldSelector!): [String!]!
  edges: [WpMenuItemLinkableEdge!]!
  group(field: WpMenuItemLinkableFieldSelector!, limit: Int, skip: Int): [WpMenuItemLinkableGroupConnection!]!
  max(field: WpMenuItemLinkableFieldSelector!): Float
  min(field: WpMenuItemLinkableFieldSelector!): Float
  nodes: [WpMenuItemLinkable!]!
  pageInfo: PageInfo!
  sum(field: WpMenuItemLinkableFieldSelector!): Float
  totalCount: Int!
}

interface WpMenuItemLinkableConnectionEdgeType implements WpEdgeType {
  """The connected MenuItemLinkable Node"""
  node: WpMenuItemLinkable!
}

type WpMenuItemLinkableEdge {
  next: WpMenuItemLinkable
  node: WpMenuItemLinkable!
  previous: WpMenuItemLinkable
}

input WpMenuItemLinkableFieldSelector {
  children: NodeFieldSelector
  databaseId: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  uri: FieldSelectorEnum
}

input WpMenuItemLinkableFilterInput {
  children: NodeFilterListInput
  databaseId: IntQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  uri: StringQueryOperatorInput
}

type WpMenuItemLinkableGroupConnection {
  distinct(field: WpMenuItemLinkableFieldSelector!): [String!]!
  edges: [WpMenuItemLinkableEdge!]!
  field: String!
  fieldValue: String
  group(field: WpMenuItemLinkableFieldSelector!, limit: Int, skip: Int): [WpMenuItemLinkableGroupConnection!]!
  max(field: WpMenuItemLinkableFieldSelector!): Float
  min(field: WpMenuItemLinkableFieldSelector!): Float
  nodes: [WpMenuItemLinkable!]!
  pageInfo: PageInfo!
  sum(field: WpMenuItemLinkableFieldSelector!): Float
  totalCount: Int!
}

input WpMenuItemLinkableSortInput {
  children: NodeSortInput
  databaseId: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  uri: SortOrderEnum
}

input WpMenuItemSortInput {
  childItems: WpMenuItemToMenuItemConnectionTypeSortInput
  children: NodeSortInput
  connectedNode: WpMenuItemToMenuItemLinkableConnectionEdgeTypeSortInput
  cssClasses: SortOrderEnum
  databaseId: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  label: SortOrderEnum
  linkRelationship: SortOrderEnum
  locations: SortOrderEnum
  menu: WpMenuItemToMenuConnectionEdgeTypeSortInput
  nodeType: SortOrderEnum
  order: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  path: SortOrderEnum
  target: SortOrderEnum
  title: SortOrderEnum
  uri: SortOrderEnum
  url: SortOrderEnum
}

"""Connection between the MenuItem type and the Menu type"""
type WpMenuItemToMenuConnectionEdgeType implements WpEdgeType & WpMenuConnectionEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpMenu!
}

input WpMenuItemToMenuConnectionEdgeTypeFieldSelector {
  node: WpMenuFieldSelector
}

input WpMenuItemToMenuConnectionEdgeTypeFilterInput {
  node: WpMenuFilterInput
}

input WpMenuItemToMenuConnectionEdgeTypeSortInput {
  node: WpMenuSortInput
}

"""Page Info on the &quot;MenuItemToMenuItemConnection&quot;"""
type WpMenuItemToMenuItemConnectionPageInfoType implements WpMenuItemConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpMenuItemToMenuItemConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpMenuItemToMenuItemConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpMenuItemToMenuItemConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the MenuItem type and the MenuItem type"""
type WpMenuItemToMenuItemConnectionType implements WpConnectionType & WpMenuItemConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpMenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuItemToMenuItemConnectionPageInfoType!
}

input WpMenuItemToMenuItemConnectionTypeFieldSelector {
  nodes: WpMenuItemFieldSelector
  pageInfo: WpMenuItemToMenuItemConnectionPageInfoTypeFieldSelector
}

input WpMenuItemToMenuItemConnectionTypeFilterInput {
  nodes: WpMenuItemFilterListInput
  pageInfo: WpMenuItemToMenuItemConnectionPageInfoTypeFilterInput
}

input WpMenuItemToMenuItemConnectionTypeSortInput {
  nodes: WpMenuItemSortInput
  pageInfo: WpMenuItemToMenuItemConnectionPageInfoTypeSortInput
}

"""Connection between the MenuItem type and the MenuItemLinkable type"""
type WpMenuItemToMenuItemLinkableConnectionEdgeType implements WpEdgeType & WpMenuItemLinkableConnectionEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpMenuItemLinkable!
}

input WpMenuItemToMenuItemLinkableConnectionEdgeTypeFieldSelector {
  node: WpMenuItemLinkableFieldSelector
}

input WpMenuItemToMenuItemLinkableConnectionEdgeTypeFilterInput {
  node: WpMenuItemLinkableFilterInput
}

input WpMenuItemToMenuItemLinkableConnectionEdgeTypeSortInput {
  node: WpMenuItemLinkableSortInput
}

"""Registered menu locations"""
enum WpMenuLocationEnum {
  NAVI_FOOTER
  NAVI_FOOTER_MOBILE
  NAVI_HEADER
  NAVI_HEADER_MOBILE
  NAVI_MOBILE
  NAVI_MOBILE_SLIDE_IN
}

input WpMenuLocationEnumQueryOperatorInput {
  eq: WpMenuLocationEnum
  in: [WpMenuLocationEnum]
  ne: WpMenuLocationEnum
  nin: [WpMenuLocationEnum]
}

input WpMenuSortInput {
  children: NodeSortInput
  count: SortOrderEnum
  databaseId: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  locations: SortOrderEnum
  menuItems: WpMenuToMenuItemConnectionTypeSortInput
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
}

"""Page Info on the &quot;MenuToMenuItemConnection&quot;"""
type WpMenuToMenuItemConnectionPageInfoType implements WpMenuItemConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpMenuToMenuItemConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpMenuToMenuItemConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpMenuToMenuItemConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Menu type and the MenuItem type"""
type WpMenuToMenuItemConnectionType implements WpConnectionType & WpMenuItemConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpMenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuToMenuItemConnectionPageInfoType!
}

input WpMenuToMenuItemConnectionTypeFieldSelector {
  nodes: WpMenuItemFieldSelector
  pageInfo: WpMenuToMenuItemConnectionPageInfoTypeFieldSelector
}

input WpMenuToMenuItemConnectionTypeFilterInput {
  nodes: WpMenuItemFilterListInput
  pageInfo: WpMenuToMenuItemConnectionPageInfoTypeFilterInput
}

input WpMenuToMenuItemConnectionTypeSortInput {
  nodes: WpMenuItemSortInput
  pageInfo: WpMenuToMenuItemConnectionPageInfoTypeSortInput
}

interface WpNode {
  """The globally unique ID for the object"""
  id: ID!
}

interface WpNodeWithAuthor implements Node & WpNode {
  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID
  children: [Node!]!
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node
}

type WpNodeWithAuthorConnection {
  distinct(field: WpNodeWithAuthorFieldSelector!): [String!]!
  edges: [WpNodeWithAuthorEdge!]!
  group(field: WpNodeWithAuthorFieldSelector!, limit: Int, skip: Int): [WpNodeWithAuthorGroupConnection!]!
  max(field: WpNodeWithAuthorFieldSelector!): Float
  min(field: WpNodeWithAuthorFieldSelector!): Float
  nodes: [WpNodeWithAuthor!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithAuthorFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithAuthorEdge {
  next: WpNodeWithAuthor
  node: WpNodeWithAuthor!
  previous: WpNodeWithAuthor
}

input WpNodeWithAuthorFieldSelector {
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFieldSelector
  authorDatabaseId: FieldSelectorEnum
  authorId: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithAuthorFilterInput {
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput
  authorDatabaseId: IntQueryOperatorInput
  authorId: IDQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithAuthorGroupConnection {
  distinct(field: WpNodeWithAuthorFieldSelector!): [String!]!
  edges: [WpNodeWithAuthorEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithAuthorFieldSelector!, limit: Int, skip: Int): [WpNodeWithAuthorGroupConnection!]!
  max(field: WpNodeWithAuthorFieldSelector!): Float
  min(field: WpNodeWithAuthorFieldSelector!): Float
  nodes: [WpNodeWithAuthor!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithAuthorFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithAuthorSortInput {
  author: WpNodeWithAuthorToUserConnectionEdgeTypeSortInput
  authorDatabaseId: SortOrderEnum
  authorId: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

"""Connection between the NodeWithAuthor type and the User type"""
type WpNodeWithAuthorToUserConnectionEdgeType implements WpEdgeType & WpOneToOneConnectionType & WpUserConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpUser!
}

input WpNodeWithAuthorToUserConnectionEdgeTypeFieldSelector {
  node: WpUserFieldSelector
}

input WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput {
  node: WpUserFilterInput
}

input WpNodeWithAuthorToUserConnectionEdgeTypeSortInput {
  node: WpUserSortInput
}

interface WpNodeWithComments implements Node & WpNode {
  children: [Node!]!

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node
}

type WpNodeWithCommentsConnection {
  distinct(field: WpNodeWithCommentsFieldSelector!): [String!]!
  edges: [WpNodeWithCommentsEdge!]!
  group(field: WpNodeWithCommentsFieldSelector!, limit: Int, skip: Int): [WpNodeWithCommentsGroupConnection!]!
  max(field: WpNodeWithCommentsFieldSelector!): Float
  min(field: WpNodeWithCommentsFieldSelector!): Float
  nodes: [WpNodeWithComments!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithCommentsFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithCommentsEdge {
  next: WpNodeWithComments
  node: WpNodeWithComments!
  previous: WpNodeWithComments
}

input WpNodeWithCommentsFieldSelector {
  children: NodeFieldSelector
  commentCount: FieldSelectorEnum
  commentStatus: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithCommentsFilterInput {
  children: NodeFilterListInput
  commentCount: IntQueryOperatorInput
  commentStatus: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithCommentsGroupConnection {
  distinct(field: WpNodeWithCommentsFieldSelector!): [String!]!
  edges: [WpNodeWithCommentsEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithCommentsFieldSelector!, limit: Int, skip: Int): [WpNodeWithCommentsGroupConnection!]!
  max(field: WpNodeWithCommentsFieldSelector!): Float
  min(field: WpNodeWithCommentsFieldSelector!): Float
  nodes: [WpNodeWithComments!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithCommentsFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithCommentsSortInput {
  children: NodeSortInput
  commentCount: SortOrderEnum
  commentStatus: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

interface WpNodeWithContentEditor implements Node & WpNode {
  children: [Node!]!

  """The content of the post."""
  content: String
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node
}

type WpNodeWithContentEditorConnection {
  distinct(field: WpNodeWithContentEditorFieldSelector!): [String!]!
  edges: [WpNodeWithContentEditorEdge!]!
  group(field: WpNodeWithContentEditorFieldSelector!, limit: Int, skip: Int): [WpNodeWithContentEditorGroupConnection!]!
  max(field: WpNodeWithContentEditorFieldSelector!): Float
  min(field: WpNodeWithContentEditorFieldSelector!): Float
  nodes: [WpNodeWithContentEditor!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithContentEditorFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithContentEditorEdge {
  next: WpNodeWithContentEditor
  node: WpNodeWithContentEditor!
  previous: WpNodeWithContentEditor
}

input WpNodeWithContentEditorFieldSelector {
  children: NodeFieldSelector
  content: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithContentEditorFilterInput {
  children: NodeFilterListInput
  content: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithContentEditorGroupConnection {
  distinct(field: WpNodeWithContentEditorFieldSelector!): [String!]!
  edges: [WpNodeWithContentEditorEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithContentEditorFieldSelector!, limit: Int, skip: Int): [WpNodeWithContentEditorGroupConnection!]!
  max(field: WpNodeWithContentEditorFieldSelector!): Float
  min(field: WpNodeWithContentEditorFieldSelector!): Float
  nodes: [WpNodeWithContentEditor!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithContentEditorFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithContentEditorSortInput {
  children: NodeSortInput
  content: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

interface WpNodeWithExcerpt implements Node & WpNode {
  children: [Node!]!

  """The excerpt of the post."""
  excerpt: String
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node
}

type WpNodeWithExcerptConnection {
  distinct(field: WpNodeWithExcerptFieldSelector!): [String!]!
  edges: [WpNodeWithExcerptEdge!]!
  group(field: WpNodeWithExcerptFieldSelector!, limit: Int, skip: Int): [WpNodeWithExcerptGroupConnection!]!
  max(field: WpNodeWithExcerptFieldSelector!): Float
  min(field: WpNodeWithExcerptFieldSelector!): Float
  nodes: [WpNodeWithExcerpt!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithExcerptFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithExcerptEdge {
  next: WpNodeWithExcerpt
  node: WpNodeWithExcerpt!
  previous: WpNodeWithExcerpt
}

input WpNodeWithExcerptFieldSelector {
  children: NodeFieldSelector
  excerpt: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithExcerptFilterInput {
  children: NodeFilterListInput
  excerpt: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithExcerptGroupConnection {
  distinct(field: WpNodeWithExcerptFieldSelector!): [String!]!
  edges: [WpNodeWithExcerptEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithExcerptFieldSelector!, limit: Int, skip: Int): [WpNodeWithExcerptGroupConnection!]!
  max(field: WpNodeWithExcerptFieldSelector!): Float
  min(field: WpNodeWithExcerptFieldSelector!): Float
  nodes: [WpNodeWithExcerpt!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithExcerptFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithExcerptSortInput {
  children: NodeSortInput
  excerpt: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

interface WpNodeWithFeaturedImage implements Node & WpNode {
  children: [Node!]!

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node
}

type WpNodeWithFeaturedImageConnection {
  distinct(field: WpNodeWithFeaturedImageFieldSelector!): [String!]!
  edges: [WpNodeWithFeaturedImageEdge!]!
  group(field: WpNodeWithFeaturedImageFieldSelector!, limit: Int, skip: Int): [WpNodeWithFeaturedImageGroupConnection!]!
  max(field: WpNodeWithFeaturedImageFieldSelector!): Float
  min(field: WpNodeWithFeaturedImageFieldSelector!): Float
  nodes: [WpNodeWithFeaturedImage!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithFeaturedImageFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithFeaturedImageEdge {
  next: WpNodeWithFeaturedImage
  node: WpNodeWithFeaturedImage!
  previous: WpNodeWithFeaturedImage
}

input WpNodeWithFeaturedImageFieldSelector {
  children: NodeFieldSelector
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFieldSelector
  featuredImageDatabaseId: FieldSelectorEnum
  featuredImageId: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithFeaturedImageFilterInput {
  children: NodeFilterListInput
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput
  featuredImageDatabaseId: IntQueryOperatorInput
  featuredImageId: IDQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithFeaturedImageGroupConnection {
  distinct(field: WpNodeWithFeaturedImageFieldSelector!): [String!]!
  edges: [WpNodeWithFeaturedImageEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithFeaturedImageFieldSelector!, limit: Int, skip: Int): [WpNodeWithFeaturedImageGroupConnection!]!
  max(field: WpNodeWithFeaturedImageFieldSelector!): Float
  min(field: WpNodeWithFeaturedImageFieldSelector!): Float
  nodes: [WpNodeWithFeaturedImage!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithFeaturedImageFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithFeaturedImageSortInput {
  children: NodeSortInput
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeSortInput
  featuredImageDatabaseId: SortOrderEnum
  featuredImageId: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type WpNodeWithFeaturedImageToMediaItemConnectionEdgeType implements WpEdgeType & WpMediaItemConnectionEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpMediaItem!
}

input WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFieldSelector {
  node: WpMediaItemFieldSelector
}

input WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput {
  node: WpMediaItemFilterInput
}

input WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeSortInput {
  node: WpMediaItemSortInput
}

interface WpNodeWithPageAttributes implements Node & WpNode {
  children: [Node!]!
  id: ID!
  internal: Internal!

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  nodeType: String
  parent: Node
}

type WpNodeWithPageAttributesConnection {
  distinct(field: WpNodeWithPageAttributesFieldSelector!): [String!]!
  edges: [WpNodeWithPageAttributesEdge!]!
  group(field: WpNodeWithPageAttributesFieldSelector!, limit: Int, skip: Int): [WpNodeWithPageAttributesGroupConnection!]!
  max(field: WpNodeWithPageAttributesFieldSelector!): Float
  min(field: WpNodeWithPageAttributesFieldSelector!): Float
  nodes: [WpNodeWithPageAttributes!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithPageAttributesFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithPageAttributesEdge {
  next: WpNodeWithPageAttributes
  node: WpNodeWithPageAttributes!
  previous: WpNodeWithPageAttributes
}

input WpNodeWithPageAttributesFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  menuOrder: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithPageAttributesFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  menuOrder: IntQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithPageAttributesGroupConnection {
  distinct(field: WpNodeWithPageAttributesFieldSelector!): [String!]!
  edges: [WpNodeWithPageAttributesEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithPageAttributesFieldSelector!, limit: Int, skip: Int): [WpNodeWithPageAttributesGroupConnection!]!
  max(field: WpNodeWithPageAttributesFieldSelector!): Float
  min(field: WpNodeWithPageAttributesFieldSelector!): Float
  nodes: [WpNodeWithPageAttributes!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithPageAttributesFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithPageAttributesSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  menuOrder: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

interface WpNodeWithRevisions implements Node & WpNode {
  children: [Node!]!
  id: ID!
  internal: Internal!

  """True if the node is a revision of another node"""
  isRevision: Boolean
  nodeType: String
  parent: Node
}

type WpNodeWithRevisionsConnection {
  distinct(field: WpNodeWithRevisionsFieldSelector!): [String!]!
  edges: [WpNodeWithRevisionsEdge!]!
  group(field: WpNodeWithRevisionsFieldSelector!, limit: Int, skip: Int): [WpNodeWithRevisionsGroupConnection!]!
  max(field: WpNodeWithRevisionsFieldSelector!): Float
  min(field: WpNodeWithRevisionsFieldSelector!): Float
  nodes: [WpNodeWithRevisions!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithRevisionsFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithRevisionsEdge {
  next: WpNodeWithRevisions
  node: WpNodeWithRevisions!
  previous: WpNodeWithRevisions
}

input WpNodeWithRevisionsFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isRevision: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpNodeWithRevisionsFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isRevision: BooleanQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

type WpNodeWithRevisionsGroupConnection {
  distinct(field: WpNodeWithRevisionsFieldSelector!): [String!]!
  edges: [WpNodeWithRevisionsEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithRevisionsFieldSelector!, limit: Int, skip: Int): [WpNodeWithRevisionsGroupConnection!]!
  max(field: WpNodeWithRevisionsFieldSelector!): Float
  min(field: WpNodeWithRevisionsFieldSelector!): Float
  nodes: [WpNodeWithRevisions!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithRevisionsFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithRevisionsSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  isRevision: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

"""Connection between the NodeWithRevisions type and the ContentNode type"""
type WpNodeWithRevisionsToContentNodeConnectionEdgeType implements WpContentNodeConnectionEdgeType & WpEdgeType & WpOneToOneConnectionType {
  """The node of the connection, without the edges"""
  node: WpContentNode!
}

interface WpNodeWithTemplate implements Node & WpNode {
  children: [Node!]!
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node

  """The template assigned to the node"""
  template: WpContentTemplate
}

type WpNodeWithTemplateConnection {
  distinct(field: WpNodeWithTemplateFieldSelector!): [String!]!
  edges: [WpNodeWithTemplateEdge!]!
  group(field: WpNodeWithTemplateFieldSelector!, limit: Int, skip: Int): [WpNodeWithTemplateGroupConnection!]!
  max(field: WpNodeWithTemplateFieldSelector!): Float
  min(field: WpNodeWithTemplateFieldSelector!): Float
  nodes: [WpNodeWithTemplate!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithTemplateFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithTemplateEdge {
  next: WpNodeWithTemplate
  node: WpNodeWithTemplate!
  previous: WpNodeWithTemplate
}

input WpNodeWithTemplateFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  template: WpContentTemplateFieldSelector
}

input WpNodeWithTemplateFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  template: WpContentTemplateFilterInput
}

type WpNodeWithTemplateGroupConnection {
  distinct(field: WpNodeWithTemplateFieldSelector!): [String!]!
  edges: [WpNodeWithTemplateEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithTemplateFieldSelector!, limit: Int, skip: Int): [WpNodeWithTemplateGroupConnection!]!
  max(field: WpNodeWithTemplateFieldSelector!): Float
  min(field: WpNodeWithTemplateFieldSelector!): Float
  nodes: [WpNodeWithTemplate!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithTemplateFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithTemplateSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
  template: WpContentTemplateSortInput
}

interface WpNodeWithTitle implements Node & WpNode {
  children: [Node!]!
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String
}

type WpNodeWithTitleConnection {
  distinct(field: WpNodeWithTitleFieldSelector!): [String!]!
  edges: [WpNodeWithTitleEdge!]!
  group(field: WpNodeWithTitleFieldSelector!, limit: Int, skip: Int): [WpNodeWithTitleGroupConnection!]!
  max(field: WpNodeWithTitleFieldSelector!): Float
  min(field: WpNodeWithTitleFieldSelector!): Float
  nodes: [WpNodeWithTitle!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithTitleFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithTitleEdge {
  next: WpNodeWithTitle
  node: WpNodeWithTitle!
  previous: WpNodeWithTitle
}

input WpNodeWithTitleFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  title: FieldSelectorEnum
}

input WpNodeWithTitleFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  title: StringQueryOperatorInput
}

type WpNodeWithTitleGroupConnection {
  distinct(field: WpNodeWithTitleFieldSelector!): [String!]!
  edges: [WpNodeWithTitleEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithTitleFieldSelector!, limit: Int, skip: Int): [WpNodeWithTitleGroupConnection!]!
  max(field: WpNodeWithTitleFieldSelector!): Float
  min(field: WpNodeWithTitleFieldSelector!): Float
  nodes: [WpNodeWithTitle!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithTitleFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithTitleSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
  title: SortOrderEnum
}

interface WpNodeWithTrackbacks implements Node & WpNode {
  children: [Node!]!
  id: ID!
  internal: Internal!
  nodeType: String
  parent: Node

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
}

type WpNodeWithTrackbacksConnection {
  distinct(field: WpNodeWithTrackbacksFieldSelector!): [String!]!
  edges: [WpNodeWithTrackbacksEdge!]!
  group(field: WpNodeWithTrackbacksFieldSelector!, limit: Int, skip: Int): [WpNodeWithTrackbacksGroupConnection!]!
  max(field: WpNodeWithTrackbacksFieldSelector!): Float
  min(field: WpNodeWithTrackbacksFieldSelector!): Float
  nodes: [WpNodeWithTrackbacks!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithTrackbacksFieldSelector!): Float
  totalCount: Int!
}

type WpNodeWithTrackbacksEdge {
  next: WpNodeWithTrackbacks
  node: WpNodeWithTrackbacks!
  previous: WpNodeWithTrackbacks
}

input WpNodeWithTrackbacksFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  pingStatus: FieldSelectorEnum
  pinged: FieldSelectorEnum
  toPing: FieldSelectorEnum
}

input WpNodeWithTrackbacksFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  pingStatus: StringQueryOperatorInput
  pinged: StringQueryOperatorInput
  toPing: StringQueryOperatorInput
}

type WpNodeWithTrackbacksGroupConnection {
  distinct(field: WpNodeWithTrackbacksFieldSelector!): [String!]!
  edges: [WpNodeWithTrackbacksEdge!]!
  field: String!
  fieldValue: String
  group(field: WpNodeWithTrackbacksFieldSelector!, limit: Int, skip: Int): [WpNodeWithTrackbacksGroupConnection!]!
  max(field: WpNodeWithTrackbacksFieldSelector!): Float
  min(field: WpNodeWithTrackbacksFieldSelector!): Float
  nodes: [WpNodeWithTrackbacks!]!
  pageInfo: PageInfo!
  sum(field: WpNodeWithTrackbacksFieldSelector!): Float
  totalCount: Int!
}

input WpNodeWithTrackbacksSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
  pingStatus: SortOrderEnum
  pinged: SortOrderEnum
  toPing: SortOrderEnum
}

interface WpOneToOneConnectionType implements WpEdgeType {
  """The connected node"""
  node: WpNode!
}

"""The page type"""
type WpPage implements Node & WpContentNode & WpDatabaseIdentifier & WpHierarchicalContentNode & WpHierarchicalNode & WpMenuItemLinkable & WpNode & WpNodeWithAuthor & WpNodeWithComments & WpNodeWithContentEditor & WpNodeWithExcerpt & WpNodeWithFeaturedImage & WpNodeWithPageAttributes & WpNodeWithRevisions & WpNodeWithTemplate & WpNodeWithTitle & WpUniformResourceIdentifiable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionType

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID
  children: [Node!]!

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the Page type and the Comment type"""
  comments: WpPageToCommentConnectionType

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The publishing date set in GMT."""
  dateGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """The excerpt of the post."""
  excerpt: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether this page is set to the privacy page."""
  isPrivacyPage: Boolean!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  nodeType: String
  parent: Node

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionType

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType
}

type WpPageConnection {
  distinct(field: WpPageFieldSelector!): [String!]!
  edges: [WpPageEdge!]!
  group(field: WpPageFieldSelector!, limit: Int, skip: Int): [WpPageGroupConnection!]!
  max(field: WpPageFieldSelector!): Float
  min(field: WpPageFieldSelector!): Float
  nodes: [WpPage!]!
  pageInfo: PageInfo!
  sum(field: WpPageFieldSelector!): Float
  totalCount: Int!
}

interface WpPageConnectionEdgeType implements WpEdgeType {
  """The connected page Node"""
  node: WpPage!
}

interface WpPageConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpPageConnectionType implements WpConnectionType {
  """A list of connected page Nodes"""
  nodes: [WpPage!]!

  """Information about pagination in a connection."""
  pageInfo: WpPageConnectionPageInfoType!
}

type WpPageEdge {
  next: WpPage
  node: WpPage!
  previous: WpPage
}

input WpPageFieldSelector {
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFieldSelector
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFieldSelector
  authorDatabaseId: FieldSelectorEnum
  authorId: FieldSelectorEnum
  children: NodeFieldSelector
  commentCount: FieldSelectorEnum
  commentStatus: FieldSelectorEnum
  comments: WpPageToCommentConnectionTypeFieldSelector
  content: FieldSelectorEnum
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFieldSelector
  contentTypeName: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  date: FieldSelectorEnum
  dateGmt: FieldSelectorEnum
  desiredSlug: FieldSelectorEnum
  enclosure: FieldSelectorEnum
  excerpt: FieldSelectorEnum
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFieldSelector
  featuredImageDatabaseId: FieldSelectorEnum
  featuredImageId: FieldSelectorEnum
  guid: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isPrivacyPage: FieldSelectorEnum
  isRevision: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFieldSelector
  link: FieldSelectorEnum
  menuOrder: FieldSelectorEnum
  modified: FieldSelectorEnum
  modifiedGmt: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  parentDatabaseId: FieldSelectorEnum
  parentId: FieldSelectorEnum
  slug: FieldSelectorEnum
  status: FieldSelectorEnum
  template: WpContentTemplateFieldSelector
  title: FieldSelectorEnum
  uri: FieldSelectorEnum
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFieldSelector
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFieldSelector
}

input WpPageFilterInput {
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeFilterInput
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput
  authorDatabaseId: IntQueryOperatorInput
  authorId: IDQueryOperatorInput
  children: NodeFilterListInput
  commentCount: IntQueryOperatorInput
  commentStatus: StringQueryOperatorInput
  comments: WpPageToCommentConnectionTypeFilterInput
  content: StringQueryOperatorInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput
  contentTypeName: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  date: DateQueryOperatorInput
  dateGmt: DateQueryOperatorInput
  desiredSlug: StringQueryOperatorInput
  enclosure: StringQueryOperatorInput
  excerpt: StringQueryOperatorInput
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput
  featuredImageDatabaseId: IntQueryOperatorInput
  featuredImageId: IDQueryOperatorInput
  guid: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isPrivacyPage: BooleanQueryOperatorInput
  isRevision: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput
  link: StringQueryOperatorInput
  menuOrder: IntQueryOperatorInput
  modified: DateQueryOperatorInput
  modifiedGmt: DateQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDatabaseId: IntQueryOperatorInput
  parentId: IDQueryOperatorInput
  slug: StringQueryOperatorInput
  status: StringQueryOperatorInput
  template: WpContentTemplateFilterInput
  title: StringQueryOperatorInput
  uri: StringQueryOperatorInput
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeFilterInput
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeFilterInput
}

input WpPageFilterListInput {
  elemMatch: WpPageFilterInput
}

type WpPageGroupConnection {
  distinct(field: WpPageFieldSelector!): [String!]!
  edges: [WpPageEdge!]!
  field: String!
  fieldValue: String
  group(field: WpPageFieldSelector!, limit: Int, skip: Int): [WpPageGroupConnection!]!
  max(field: WpPageFieldSelector!): Float
  min(field: WpPageFieldSelector!): Float
  nodes: [WpPage!]!
  pageInfo: PageInfo!
  sum(field: WpPageFieldSelector!): Float
  totalCount: Int!
}

interface WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPageSortInput {
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionTypeSortInput
  author: WpNodeWithAuthorToUserConnectionEdgeTypeSortInput
  authorDatabaseId: SortOrderEnum
  authorId: SortOrderEnum
  children: NodeSortInput
  commentCount: SortOrderEnum
  commentStatus: SortOrderEnum
  comments: WpPageToCommentConnectionTypeSortInput
  content: SortOrderEnum
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeSortInput
  contentTypeName: SortOrderEnum
  databaseId: SortOrderEnum
  date: SortOrderEnum
  dateGmt: SortOrderEnum
  desiredSlug: SortOrderEnum
  enclosure: SortOrderEnum
  excerpt: SortOrderEnum
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeSortInput
  featuredImageDatabaseId: SortOrderEnum
  featuredImageId: SortOrderEnum
  guid: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isPrivacyPage: SortOrderEnum
  isRevision: SortOrderEnum
  isTermNode: SortOrderEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeSortInput
  link: SortOrderEnum
  menuOrder: SortOrderEnum
  modified: SortOrderEnum
  modifiedGmt: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  parentDatabaseId: SortOrderEnum
  parentId: SortOrderEnum
  slug: SortOrderEnum
  status: SortOrderEnum
  template: WpContentTemplateSortInput
  title: SortOrderEnum
  uri: SortOrderEnum
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionTypeSortInput
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeTypeSortInput
}

"""Page Info on the &quot;PageToCommentConnection&quot;"""
type WpPageToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPageToCommentConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPageToCommentConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPageToCommentConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Page type and the Comment type"""
type WpPageToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpPageToCommentConnectionPageInfoType!
}

input WpPageToCommentConnectionTypeFieldSelector {
  nodes: WpCommentFieldSelector
  pageInfo: WpPageToCommentConnectionPageInfoTypeFieldSelector
}

input WpPageToCommentConnectionTypeFilterInput {
  nodes: WpCommentFilterListInput
  pageInfo: WpPageToCommentConnectionPageInfoTypeFilterInput
}

input WpPageToCommentConnectionTypeSortInput {
  nodes: WpCommentSortInput
  pageInfo: WpPageToCommentConnectionPageInfoTypeSortInput
}

"""The post type"""
type WpPost implements Node & WpContentNode & WpDatabaseIdentifier & WpMenuItemLinkable & WpNode & WpNodeWithAuthor & WpNodeWithComments & WpNodeWithContentEditor & WpNodeWithExcerpt & WpNodeWithFeaturedImage & WpNodeWithRevisions & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithTrackbacks & WpUniformResourceIdentifiable {
  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """Connection between the Post type and the category type"""
  categories: WpPostToCategoryConnectionType
  children: [Node!]!

  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the Post type and the Comment type"""
  comments: WpPostToCommentConnectionType

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The publishing date set in GMT."""
  dateGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """The excerpt of the post."""
  excerpt: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether this page is sticky"""
  isSticky: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt(
    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  nodeType: String
  parent: Node

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Connection between the Post type and the postFormat type"""
  postFormats: WpPostToPostFormatConnectionType

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the Post type and the tag type"""
  tags: WpPostToTagConnectionType

  """The template assigned to the node"""
  template: WpContentTemplate

  """Connection between the Post type and the TermNode type"""
  terms: WpPostToTermNodeConnectionType

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """URLs queued to be pinged."""
  toPing: [String]

  """The unique resource identifier path"""
  uri: String
}

type WpPostConnection {
  distinct(field: WpPostFieldSelector!): [String!]!
  edges: [WpPostEdge!]!
  group(field: WpPostFieldSelector!, limit: Int, skip: Int): [WpPostGroupConnection!]!
  max(field: WpPostFieldSelector!): Float
  min(field: WpPostFieldSelector!): Float
  nodes: [WpPost!]!
  pageInfo: PageInfo!
  sum(field: WpPostFieldSelector!): Float
  totalCount: Int!
}

interface WpPostConnectionEdgeType implements WpEdgeType {
  """The connected post Node"""
  node: WpPost!
}

interface WpPostConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpPostConnectionType implements WpConnectionType {
  """A list of connected post Nodes"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostConnectionPageInfoType!
}

type WpPostEdge {
  next: WpPost
  node: WpPost!
  previous: WpPost
}

input WpPostFieldSelector {
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFieldSelector
  authorDatabaseId: FieldSelectorEnum
  authorId: FieldSelectorEnum
  categories: WpPostToCategoryConnectionTypeFieldSelector
  children: NodeFieldSelector
  commentCount: FieldSelectorEnum
  commentStatus: FieldSelectorEnum
  comments: WpPostToCommentConnectionTypeFieldSelector
  content: FieldSelectorEnum
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFieldSelector
  contentTypeName: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  date: FieldSelectorEnum
  dateGmt: FieldSelectorEnum
  desiredSlug: FieldSelectorEnum
  enclosure: FieldSelectorEnum
  excerpt: FieldSelectorEnum
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFieldSelector
  featuredImageDatabaseId: FieldSelectorEnum
  featuredImageId: FieldSelectorEnum
  guid: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isRevision: FieldSelectorEnum
  isSticky: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFieldSelector
  link: FieldSelectorEnum
  modified: FieldSelectorEnum
  modifiedGmt: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  pingStatus: FieldSelectorEnum
  pinged: FieldSelectorEnum
  postFormats: WpPostToPostFormatConnectionTypeFieldSelector
  slug: FieldSelectorEnum
  status: FieldSelectorEnum
  tags: WpPostToTagConnectionTypeFieldSelector
  template: WpContentTemplateFieldSelector
  terms: WpPostToTermNodeConnectionTypeFieldSelector
  title: FieldSelectorEnum
  toPing: FieldSelectorEnum
  uri: FieldSelectorEnum
}

input WpPostFilterInput {
  author: WpNodeWithAuthorToUserConnectionEdgeTypeFilterInput
  authorDatabaseId: IntQueryOperatorInput
  authorId: IDQueryOperatorInput
  categories: WpPostToCategoryConnectionTypeFilterInput
  children: NodeFilterListInput
  commentCount: IntQueryOperatorInput
  commentStatus: StringQueryOperatorInput
  comments: WpPostToCommentConnectionTypeFilterInput
  content: StringQueryOperatorInput
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeFilterInput
  contentTypeName: StringQueryOperatorInput
  databaseId: IntQueryOperatorInput
  date: DateQueryOperatorInput
  dateGmt: DateQueryOperatorInput
  desiredSlug: StringQueryOperatorInput
  enclosure: StringQueryOperatorInput
  excerpt: StringQueryOperatorInput
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeFilterInput
  featuredImageDatabaseId: IntQueryOperatorInput
  featuredImageId: IDQueryOperatorInput
  guid: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isRevision: BooleanQueryOperatorInput
  isSticky: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeFilterInput
  link: StringQueryOperatorInput
  modified: DateQueryOperatorInput
  modifiedGmt: DateQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  pingStatus: StringQueryOperatorInput
  pinged: StringQueryOperatorInput
  postFormats: WpPostToPostFormatConnectionTypeFilterInput
  slug: StringQueryOperatorInput
  status: StringQueryOperatorInput
  tags: WpPostToTagConnectionTypeFilterInput
  template: WpContentTemplateFilterInput
  terms: WpPostToTermNodeConnectionTypeFilterInput
  title: StringQueryOperatorInput
  toPing: StringQueryOperatorInput
  uri: StringQueryOperatorInput
}

input WpPostFilterListInput {
  elemMatch: WpPostFilterInput
}

"""The postFormat type"""
type WpPostFormat implements Node & WpDatabaseIdentifier & WpNode & WpTermNode & WpUniformResourceIdentifiable {
  children: [Node!]!

  """Connection between the PostFormat type and the ContentNode type"""
  contentNodes: WpPostFormatToContentNodeConnectionType

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String
  nodeType: String
  parent: Node

  """Connection between the PostFormat type and the post type"""
  posts: WpPostFormatToPostConnectionType

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the PostFormat type and the Taxonomy type"""
  taxonomy: WpPostFormatToTaxonomyConnectionEdgeType

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

type WpPostFormatConnection {
  distinct(field: WpPostFormatFieldSelector!): [String!]!
  edges: [WpPostFormatEdge!]!
  group(field: WpPostFormatFieldSelector!, limit: Int, skip: Int): [WpPostFormatGroupConnection!]!
  max(field: WpPostFormatFieldSelector!): Float
  min(field: WpPostFormatFieldSelector!): Float
  nodes: [WpPostFormat!]!
  pageInfo: PageInfo!
  sum(field: WpPostFormatFieldSelector!): Float
  totalCount: Int!
}

interface WpPostFormatConnectionEdgeType implements WpEdgeType {
  """The connected postFormat Node"""
  node: WpPostFormat!
}

interface WpPostFormatConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpPostFormatConnectionType implements WpConnectionType {
  """A list of connected postFormat Nodes"""
  nodes: [WpPostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostFormatConnectionPageInfoType!
}

type WpPostFormatEdge {
  next: WpPostFormat
  node: WpPostFormat!
  previous: WpPostFormat
}

input WpPostFormatFieldSelector {
  children: NodeFieldSelector
  contentNodes: WpPostFormatToContentNodeConnectionTypeFieldSelector
  count: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  link: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  posts: WpPostFormatToPostConnectionTypeFieldSelector
  slug: FieldSelectorEnum
  taxonomy: WpPostFormatToTaxonomyConnectionEdgeTypeFieldSelector
  taxonomyName: FieldSelectorEnum
  termGroupId: FieldSelectorEnum
  termTaxonomyId: FieldSelectorEnum
  uri: FieldSelectorEnum
}

input WpPostFormatFilterInput {
  children: NodeFilterListInput
  contentNodes: WpPostFormatToContentNodeConnectionTypeFilterInput
  count: IntQueryOperatorInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  link: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  posts: WpPostFormatToPostConnectionTypeFilterInput
  slug: StringQueryOperatorInput
  taxonomy: WpPostFormatToTaxonomyConnectionEdgeTypeFilterInput
  taxonomyName: StringQueryOperatorInput
  termGroupId: IntQueryOperatorInput
  termTaxonomyId: IntQueryOperatorInput
  uri: StringQueryOperatorInput
}

input WpPostFormatFilterListInput {
  elemMatch: WpPostFormatFilterInput
}

type WpPostFormatGroupConnection {
  distinct(field: WpPostFormatFieldSelector!): [String!]!
  edges: [WpPostFormatEdge!]!
  field: String!
  fieldValue: String
  group(field: WpPostFormatFieldSelector!, limit: Int, skip: Int): [WpPostFormatGroupConnection!]!
  max(field: WpPostFormatFieldSelector!): Float
  min(field: WpPostFormatFieldSelector!): Float
  nodes: [WpPostFormat!]!
  pageInfo: PageInfo!
  sum(field: WpPostFormatFieldSelector!): Float
  totalCount: Int!
}

input WpPostFormatSortInput {
  children: NodeSortInput
  contentNodes: WpPostFormatToContentNodeConnectionTypeSortInput
  count: SortOrderEnum
  databaseId: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  link: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  posts: WpPostFormatToPostConnectionTypeSortInput
  slug: SortOrderEnum
  taxonomy: WpPostFormatToTaxonomyConnectionEdgeTypeSortInput
  taxonomyName: SortOrderEnum
  termGroupId: SortOrderEnum
  termTaxonomyId: SortOrderEnum
  uri: SortOrderEnum
}

"""Page Info on the &quot;PostFormatToContentNodeConnection&quot;"""
type WpPostFormatToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostFormatToContentNodeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostFormatToContentNodeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostFormatToContentNodeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the PostFormat type and the ContentNode type"""
type WpPostFormatToContentNodeConnectionType implements WpConnectionType & WpContentNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostFormatToContentNodeConnectionPageInfoType!
}

input WpPostFormatToContentNodeConnectionTypeFieldSelector {
  nodes: WpContentNodeFieldSelector
  pageInfo: WpPostFormatToContentNodeConnectionPageInfoTypeFieldSelector
}

input WpPostFormatToContentNodeConnectionTypeFilterInput {
  nodes: WpContentNodeFilterListInput
  pageInfo: WpPostFormatToContentNodeConnectionPageInfoTypeFilterInput
}

input WpPostFormatToContentNodeConnectionTypeSortInput {
  nodes: WpContentNodeSortInput
  pageInfo: WpPostFormatToContentNodeConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;PostFormatToPostConnection&quot;"""
type WpPostFormatToPostConnectionPageInfoType implements WpPageInfoType & WpPostConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostFormatToPostConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostFormatToPostConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostFormatToPostConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the PostFormat type and the post type"""
type WpPostFormatToPostConnectionType implements WpConnectionType & WpPostConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostFormatToPostConnectionPageInfoType!
}

input WpPostFormatToPostConnectionTypeFieldSelector {
  nodes: WpPostFieldSelector
  pageInfo: WpPostFormatToPostConnectionPageInfoTypeFieldSelector
}

input WpPostFormatToPostConnectionTypeFilterInput {
  nodes: WpPostFilterListInput
  pageInfo: WpPostFormatToPostConnectionPageInfoTypeFilterInput
}

input WpPostFormatToPostConnectionTypeSortInput {
  nodes: WpPostSortInput
  pageInfo: WpPostFormatToPostConnectionPageInfoTypeSortInput
}

"""Connection between the PostFormat type and the Taxonomy type"""
type WpPostFormatToTaxonomyConnectionEdgeType implements WpEdgeType & WpOneToOneConnectionType & WpTaxonomyConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTaxonomy!
}

input WpPostFormatToTaxonomyConnectionEdgeTypeFieldSelector {
  node: WpTaxonomyFieldSelector
}

input WpPostFormatToTaxonomyConnectionEdgeTypeFilterInput {
  node: WpTaxonomyFilterInput
}

input WpPostFormatToTaxonomyConnectionEdgeTypeSortInput {
  node: WpTaxonomySortInput
}

type WpPostGroupConnection {
  distinct(field: WpPostFieldSelector!): [String!]!
  edges: [WpPostEdge!]!
  field: String!
  fieldValue: String
  group(field: WpPostFieldSelector!, limit: Int, skip: Int): [WpPostGroupConnection!]!
  max(field: WpPostFieldSelector!): Float
  min(field: WpPostFieldSelector!): Float
  nodes: [WpPost!]!
  pageInfo: PageInfo!
  sum(field: WpPostFieldSelector!): Float
  totalCount: Int!
}

input WpPostSortInput {
  author: WpNodeWithAuthorToUserConnectionEdgeTypeSortInput
  authorDatabaseId: SortOrderEnum
  authorId: SortOrderEnum
  categories: WpPostToCategoryConnectionTypeSortInput
  children: NodeSortInput
  commentCount: SortOrderEnum
  commentStatus: SortOrderEnum
  comments: WpPostToCommentConnectionTypeSortInput
  content: SortOrderEnum
  contentType: WpContentNodeToContentTypeConnectionEdgeTypeSortInput
  contentTypeName: SortOrderEnum
  databaseId: SortOrderEnum
  date: SortOrderEnum
  dateGmt: SortOrderEnum
  desiredSlug: SortOrderEnum
  enclosure: SortOrderEnum
  excerpt: SortOrderEnum
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeTypeSortInput
  featuredImageDatabaseId: SortOrderEnum
  featuredImageId: SortOrderEnum
  guid: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isRevision: SortOrderEnum
  isSticky: SortOrderEnum
  isTermNode: SortOrderEnum
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeTypeSortInput
  link: SortOrderEnum
  modified: SortOrderEnum
  modifiedGmt: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  pingStatus: SortOrderEnum
  pinged: SortOrderEnum
  postFormats: WpPostToPostFormatConnectionTypeSortInput
  slug: SortOrderEnum
  status: SortOrderEnum
  tags: WpPostToTagConnectionTypeSortInput
  template: WpContentTemplateSortInput
  terms: WpPostToTermNodeConnectionTypeSortInput
  title: SortOrderEnum
  toPing: SortOrderEnum
  uri: SortOrderEnum
}

"""Page Info on the &quot;PostToCategoryConnection&quot;"""
type WpPostToCategoryConnectionPageInfoType implements WpCategoryConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostToCategoryConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostToCategoryConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostToCategoryConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Post type and the category type"""
type WpPostToCategoryConnectionType implements WpCategoryConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToCategoryConnectionPageInfoType!
}

input WpPostToCategoryConnectionTypeFieldSelector {
  nodes: WpCategoryFieldSelector
  pageInfo: WpPostToCategoryConnectionPageInfoTypeFieldSelector
}

input WpPostToCategoryConnectionTypeFilterInput {
  nodes: WpCategoryFilterListInput
  pageInfo: WpPostToCategoryConnectionPageInfoTypeFilterInput
}

input WpPostToCategoryConnectionTypeSortInput {
  nodes: WpCategorySortInput
  pageInfo: WpPostToCategoryConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;PostToCommentConnection&quot;"""
type WpPostToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostToCommentConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostToCommentConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostToCommentConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Post type and the Comment type"""
type WpPostToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToCommentConnectionPageInfoType!
}

input WpPostToCommentConnectionTypeFieldSelector {
  nodes: WpCommentFieldSelector
  pageInfo: WpPostToCommentConnectionPageInfoTypeFieldSelector
}

input WpPostToCommentConnectionTypeFilterInput {
  nodes: WpCommentFilterListInput
  pageInfo: WpPostToCommentConnectionPageInfoTypeFilterInput
}

input WpPostToCommentConnectionTypeSortInput {
  nodes: WpCommentSortInput
  pageInfo: WpPostToCommentConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;PostToPostFormatConnection&quot;"""
type WpPostToPostFormatConnectionPageInfoType implements WpPageInfoType & WpPostFormatConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostToPostFormatConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostToPostFormatConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostToPostFormatConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Post type and the postFormat type"""
type WpPostToPostFormatConnectionType implements WpConnectionType & WpPostFormatConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToPostFormatConnectionPageInfoType!
}

input WpPostToPostFormatConnectionTypeFieldSelector {
  nodes: WpPostFormatFieldSelector
  pageInfo: WpPostToPostFormatConnectionPageInfoTypeFieldSelector
}

input WpPostToPostFormatConnectionTypeFilterInput {
  nodes: WpPostFormatFilterListInput
  pageInfo: WpPostToPostFormatConnectionPageInfoTypeFilterInput
}

input WpPostToPostFormatConnectionTypeSortInput {
  nodes: WpPostFormatSortInput
  pageInfo: WpPostToPostFormatConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;PostToTagConnection&quot;"""
type WpPostToTagConnectionPageInfoType implements WpPageInfoType & WpTagConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostToTagConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostToTagConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostToTagConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Post type and the tag type"""
type WpPostToTagConnectionType implements WpConnectionType & WpTagConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTag!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToTagConnectionPageInfoType!
}

input WpPostToTagConnectionTypeFieldSelector {
  nodes: WpTagFieldSelector
  pageInfo: WpPostToTagConnectionPageInfoTypeFieldSelector
}

input WpPostToTagConnectionTypeFilterInput {
  nodes: WpTagFilterListInput
  pageInfo: WpPostToTagConnectionPageInfoTypeFilterInput
}

input WpPostToTagConnectionTypeSortInput {
  nodes: WpTagSortInput
  pageInfo: WpPostToTagConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;PostToTermNodeConnection&quot;"""
type WpPostToTermNodeConnectionPageInfoType implements WpPageInfoType & WpTermNodeConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpPostToTermNodeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpPostToTermNodeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpPostToTermNodeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Post type and the TermNode type"""
type WpPostToTermNodeConnectionType implements WpConnectionType & WpTermNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTermNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToTermNodeConnectionPageInfoType!
}

input WpPostToTermNodeConnectionTypeFieldSelector {
  nodes: WpTermNodeFieldSelector
  pageInfo: WpPostToTermNodeConnectionPageInfoTypeFieldSelector
}

input WpPostToTermNodeConnectionTypeFilterInput {
  nodes: WpTermNodeFilterListInput
  pageInfo: WpPostToTermNodeConnectionPageInfoTypeFilterInput
}

input WpPostToTermNodeConnectionTypeSortInput {
  nodes: WpTermNodeSortInput
  pageInfo: WpPostToTermNodeConnectionPageInfoTypeSortInput
}

"""Details for labels of the PostType"""
type WpPostTypeLabelDetails {
  """Default is ‘Add New’ for both hierarchical and non-hierarchical types."""
  addNew: String

  """Label for adding a new singular item."""
  addNewItem: String

  """Label to signify all items in a submenu link."""
  allItems: String

  """Label for archives in nav menus"""
  archives: String

  """Label for the attributes meta box."""
  attributes: String

  """Label for editing a singular item."""
  editItem: String

  """Label for the Featured Image meta box title."""
  featuredImage: String

  """Label for the table views hidden heading."""
  filterItemsList: String

  """Label for the media frame button."""
  insertIntoItem: String

  """Label for the table hidden heading."""
  itemsList: String

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String

  """Label for the menu name."""
  menuName: String

  """General name for the post type, usually plural."""
  name: String

  """Label for the new item page title."""
  newItem: String

  """Label used when no items are found."""
  notFound: String

  """Label used when no items are in the trash."""
  notFoundInTrash: String

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String

  """Label for removing the featured image."""
  removeFeaturedImage: String

  """Label for searching plural items."""
  searchItems: String

  """Label for setting the featured image."""
  setFeaturedImage: String

  """Name for one object of this post type."""
  singularName: String

  """Label for the media frame filter."""
  uploadedToThisItem: String

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String

  """Label for viewing a singular item."""
  viewItem: String

  """Label for viewing post type archives."""
  viewItems: String
}

input WpPostTypeLabelDetailsFieldSelector {
  addNew: FieldSelectorEnum
  addNewItem: FieldSelectorEnum
  allItems: FieldSelectorEnum
  archives: FieldSelectorEnum
  attributes: FieldSelectorEnum
  editItem: FieldSelectorEnum
  featuredImage: FieldSelectorEnum
  filterItemsList: FieldSelectorEnum
  insertIntoItem: FieldSelectorEnum
  itemsList: FieldSelectorEnum
  itemsListNavigation: FieldSelectorEnum
  menuName: FieldSelectorEnum
  name: FieldSelectorEnum
  newItem: FieldSelectorEnum
  notFound: FieldSelectorEnum
  notFoundInTrash: FieldSelectorEnum
  parentItemColon: FieldSelectorEnum
  removeFeaturedImage: FieldSelectorEnum
  searchItems: FieldSelectorEnum
  setFeaturedImage: FieldSelectorEnum
  singularName: FieldSelectorEnum
  uploadedToThisItem: FieldSelectorEnum
  useFeaturedImage: FieldSelectorEnum
  viewItem: FieldSelectorEnum
  viewItems: FieldSelectorEnum
}

input WpPostTypeLabelDetailsFilterInput {
  addNew: StringQueryOperatorInput
  addNewItem: StringQueryOperatorInput
  allItems: StringQueryOperatorInput
  archives: StringQueryOperatorInput
  attributes: StringQueryOperatorInput
  editItem: StringQueryOperatorInput
  featuredImage: StringQueryOperatorInput
  filterItemsList: StringQueryOperatorInput
  insertIntoItem: StringQueryOperatorInput
  itemsList: StringQueryOperatorInput
  itemsListNavigation: StringQueryOperatorInput
  menuName: StringQueryOperatorInput
  name: StringQueryOperatorInput
  newItem: StringQueryOperatorInput
  notFound: StringQueryOperatorInput
  notFoundInTrash: StringQueryOperatorInput
  parentItemColon: StringQueryOperatorInput
  removeFeaturedImage: StringQueryOperatorInput
  searchItems: StringQueryOperatorInput
  setFeaturedImage: StringQueryOperatorInput
  singularName: StringQueryOperatorInput
  uploadedToThisItem: StringQueryOperatorInput
  useFeaturedImage: StringQueryOperatorInput
  viewItem: StringQueryOperatorInput
  viewItems: StringQueryOperatorInput
}

input WpPostTypeLabelDetailsSortInput {
  addNew: SortOrderEnum
  addNewItem: SortOrderEnum
  allItems: SortOrderEnum
  archives: SortOrderEnum
  attributes: SortOrderEnum
  editItem: SortOrderEnum
  featuredImage: SortOrderEnum
  filterItemsList: SortOrderEnum
  insertIntoItem: SortOrderEnum
  itemsList: SortOrderEnum
  itemsListNavigation: SortOrderEnum
  menuName: SortOrderEnum
  name: SortOrderEnum
  newItem: SortOrderEnum
  notFound: SortOrderEnum
  notFoundInTrash: SortOrderEnum
  parentItemColon: SortOrderEnum
  removeFeaturedImage: SortOrderEnum
  searchItems: SortOrderEnum
  setFeaturedImage: SortOrderEnum
  singularName: SortOrderEnum
  uploadedToThisItem: SortOrderEnum
  useFeaturedImage: SortOrderEnum
  viewItem: SortOrderEnum
  viewItems: SortOrderEnum
}

"""The reading setting type"""
type WpReadingSettings {
  """The ID of the page that should display the latest posts"""
  pageForPosts: Int

  """The ID of the page that should be displayed on the front page"""
  pageOnFront: Int

  """Blog pages show at most."""
  postsPerPage: Int

  """What to show on the front page"""
  showOnFront: String
}

input WpReadingSettingsFieldSelector {
  pageForPosts: FieldSelectorEnum
  pageOnFront: FieldSelectorEnum
  postsPerPage: FieldSelectorEnum
  showOnFront: FieldSelectorEnum
}

input WpReadingSettingsFilterInput {
  pageForPosts: IntQueryOperatorInput
  pageOnFront: IntQueryOperatorInput
  postsPerPage: IntQueryOperatorInput
  showOnFront: StringQueryOperatorInput
}

input WpReadingSettingsSortInput {
  pageForPosts: SortOrderEnum
  pageOnFront: SortOrderEnum
  postsPerPage: SortOrderEnum
  showOnFront: SortOrderEnum
}

"""All of the registered settings"""
type WpSettings {
  """Settings of the the string Settings Group"""
  discussionSettingsDefaultCommentStatus: String

  """Settings of the the string Settings Group"""
  discussionSettingsDefaultPingStatus: String

  """Settings of the the string Settings Group"""
  generalSettingsDateFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsDescription: String

  """Settings of the the string Settings Group"""
  generalSettingsEmail: String

  """Settings of the the string Settings Group"""
  generalSettingsLanguage: String

  """Settings of the the integer Settings Group"""
  generalSettingsStartOfWeek: Int

  """Settings of the the string Settings Group"""
  generalSettingsTimeFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsTimezone: String

  """Settings of the the string Settings Group"""
  generalSettingsTitle: String

  """Settings of the the string Settings Group"""
  generalSettingsUrl: String

  """Settings of the the integer Settings Group"""
  readingSettingsPageForPosts: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPageOnFront: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPostsPerPage: Int

  """Settings of the the string Settings Group"""
  readingSettingsShowOnFront: String

  """Settings of the the integer Settings Group"""
  writingSettingsDefaultCategory: Int

  """Settings of the the string Settings Group"""
  writingSettingsDefaultPostFormat: String

  """Settings of the the boolean Settings Group"""
  writingSettingsUseSmilies: Boolean
}

input WpSettingsFieldSelector {
  discussionSettingsDefaultCommentStatus: FieldSelectorEnum
  discussionSettingsDefaultPingStatus: FieldSelectorEnum
  generalSettingsDateFormat: FieldSelectorEnum
  generalSettingsDescription: FieldSelectorEnum
  generalSettingsEmail: FieldSelectorEnum
  generalSettingsLanguage: FieldSelectorEnum
  generalSettingsStartOfWeek: FieldSelectorEnum
  generalSettingsTimeFormat: FieldSelectorEnum
  generalSettingsTimezone: FieldSelectorEnum
  generalSettingsTitle: FieldSelectorEnum
  generalSettingsUrl: FieldSelectorEnum
  readingSettingsPageForPosts: FieldSelectorEnum
  readingSettingsPageOnFront: FieldSelectorEnum
  readingSettingsPostsPerPage: FieldSelectorEnum
  readingSettingsShowOnFront: FieldSelectorEnum
  writingSettingsDefaultCategory: FieldSelectorEnum
  writingSettingsDefaultPostFormat: FieldSelectorEnum
  writingSettingsUseSmilies: FieldSelectorEnum
}

input WpSettingsFilterInput {
  discussionSettingsDefaultCommentStatus: StringQueryOperatorInput
  discussionSettingsDefaultPingStatus: StringQueryOperatorInput
  generalSettingsDateFormat: StringQueryOperatorInput
  generalSettingsDescription: StringQueryOperatorInput
  generalSettingsEmail: StringQueryOperatorInput
  generalSettingsLanguage: StringQueryOperatorInput
  generalSettingsStartOfWeek: IntQueryOperatorInput
  generalSettingsTimeFormat: StringQueryOperatorInput
  generalSettingsTimezone: StringQueryOperatorInput
  generalSettingsTitle: StringQueryOperatorInput
  generalSettingsUrl: StringQueryOperatorInput
  readingSettingsPageForPosts: IntQueryOperatorInput
  readingSettingsPageOnFront: IntQueryOperatorInput
  readingSettingsPostsPerPage: IntQueryOperatorInput
  readingSettingsShowOnFront: StringQueryOperatorInput
  writingSettingsDefaultCategory: IntQueryOperatorInput
  writingSettingsDefaultPostFormat: StringQueryOperatorInput
  writingSettingsUseSmilies: BooleanQueryOperatorInput
}

input WpSettingsSortInput {
  discussionSettingsDefaultCommentStatus: SortOrderEnum
  discussionSettingsDefaultPingStatus: SortOrderEnum
  generalSettingsDateFormat: SortOrderEnum
  generalSettingsDescription: SortOrderEnum
  generalSettingsEmail: SortOrderEnum
  generalSettingsLanguage: SortOrderEnum
  generalSettingsStartOfWeek: SortOrderEnum
  generalSettingsTimeFormat: SortOrderEnum
  generalSettingsTimezone: SortOrderEnum
  generalSettingsTitle: SortOrderEnum
  generalSettingsUrl: SortOrderEnum
  readingSettingsPageForPosts: SortOrderEnum
  readingSettingsPageOnFront: SortOrderEnum
  readingSettingsPostsPerPage: SortOrderEnum
  readingSettingsShowOnFront: SortOrderEnum
  writingSettingsDefaultCategory: SortOrderEnum
  writingSettingsDefaultPostFormat: SortOrderEnum
  writingSettingsUseSmilies: SortOrderEnum
}

input WpSortInput {
  allSettings: WpSettingsSortInput
  children: NodeSortInput
  discussionSettings: WpDiscussionSettingsSortInput
  generalSettings: WpGeneralSettingsSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  nodeType: SortOrderEnum
  parent: NodeSortInput
  readingSettings: WpReadingSettingsSortInput
  wpGatsby: WpWPGatsbySortInput
  writingSettings: WpWritingSettingsSortInput
}

"""The tag type"""
type WpTag implements Node & WpDatabaseIdentifier & WpMenuItemLinkable & WpNode & WpTermNode & WpUniformResourceIdentifiable {
  children: [Node!]!

  """Connection between the Tag type and the ContentNode type"""
  contentNodes: WpTagToContentNodeConnectionType

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String
  nodeType: String
  parent: Node

  """Connection between the Tag type and the post type"""
  posts: WpTagToPostConnectionType

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the Tag type and the Taxonomy type"""
  taxonomy: WpTagToTaxonomyConnectionEdgeType

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

type WpTagConnection {
  distinct(field: WpTagFieldSelector!): [String!]!
  edges: [WpTagEdge!]!
  group(field: WpTagFieldSelector!, limit: Int, skip: Int): [WpTagGroupConnection!]!
  max(field: WpTagFieldSelector!): Float
  min(field: WpTagFieldSelector!): Float
  nodes: [WpTag!]!
  pageInfo: PageInfo!
  sum(field: WpTagFieldSelector!): Float
  totalCount: Int!
}

interface WpTagConnectionEdgeType implements WpEdgeType {
  """The connected tag Node"""
  node: WpTag!
}

interface WpTagConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpTagConnectionType implements WpConnectionType {
  """A list of connected tag Nodes"""
  nodes: [WpTag!]!

  """Information about pagination in a connection."""
  pageInfo: WpTagConnectionPageInfoType!
}

type WpTagEdge {
  next: WpTag
  node: WpTag!
  previous: WpTag
}

input WpTagFieldSelector {
  children: NodeFieldSelector
  contentNodes: WpTagToContentNodeConnectionTypeFieldSelector
  count: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  link: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  posts: WpTagToPostConnectionTypeFieldSelector
  slug: FieldSelectorEnum
  taxonomy: WpTagToTaxonomyConnectionEdgeTypeFieldSelector
  taxonomyName: FieldSelectorEnum
  termGroupId: FieldSelectorEnum
  termTaxonomyId: FieldSelectorEnum
  uri: FieldSelectorEnum
}

input WpTagFilterInput {
  children: NodeFilterListInput
  contentNodes: WpTagToContentNodeConnectionTypeFilterInput
  count: IntQueryOperatorInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  link: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  posts: WpTagToPostConnectionTypeFilterInput
  slug: StringQueryOperatorInput
  taxonomy: WpTagToTaxonomyConnectionEdgeTypeFilterInput
  taxonomyName: StringQueryOperatorInput
  termGroupId: IntQueryOperatorInput
  termTaxonomyId: IntQueryOperatorInput
  uri: StringQueryOperatorInput
}

input WpTagFilterListInput {
  elemMatch: WpTagFilterInput
}

type WpTagGroupConnection {
  distinct(field: WpTagFieldSelector!): [String!]!
  edges: [WpTagEdge!]!
  field: String!
  fieldValue: String
  group(field: WpTagFieldSelector!, limit: Int, skip: Int): [WpTagGroupConnection!]!
  max(field: WpTagFieldSelector!): Float
  min(field: WpTagFieldSelector!): Float
  nodes: [WpTag!]!
  pageInfo: PageInfo!
  sum(field: WpTagFieldSelector!): Float
  totalCount: Int!
}

input WpTagSortInput {
  children: NodeSortInput
  contentNodes: WpTagToContentNodeConnectionTypeSortInput
  count: SortOrderEnum
  databaseId: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  link: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  posts: WpTagToPostConnectionTypeSortInput
  slug: SortOrderEnum
  taxonomy: WpTagToTaxonomyConnectionEdgeTypeSortInput
  taxonomyName: SortOrderEnum
  termGroupId: SortOrderEnum
  termTaxonomyId: SortOrderEnum
  uri: SortOrderEnum
}

"""Page Info on the &quot;TagToContentNodeConnection&quot;"""
type WpTagToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpTagToContentNodeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpTagToContentNodeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpTagToContentNodeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Tag type and the ContentNode type"""
type WpTagToContentNodeConnectionType implements WpConnectionType & WpContentNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpTagToContentNodeConnectionPageInfoType!
}

input WpTagToContentNodeConnectionTypeFieldSelector {
  nodes: WpContentNodeFieldSelector
  pageInfo: WpTagToContentNodeConnectionPageInfoTypeFieldSelector
}

input WpTagToContentNodeConnectionTypeFilterInput {
  nodes: WpContentNodeFilterListInput
  pageInfo: WpTagToContentNodeConnectionPageInfoTypeFilterInput
}

input WpTagToContentNodeConnectionTypeSortInput {
  nodes: WpContentNodeSortInput
  pageInfo: WpTagToContentNodeConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;TagToPostConnection&quot;"""
type WpTagToPostConnectionPageInfoType implements WpPageInfoType & WpPostConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpTagToPostConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpTagToPostConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpTagToPostConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Tag type and the post type"""
type WpTagToPostConnectionType implements WpConnectionType & WpPostConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpTagToPostConnectionPageInfoType!
}

input WpTagToPostConnectionTypeFieldSelector {
  nodes: WpPostFieldSelector
  pageInfo: WpTagToPostConnectionPageInfoTypeFieldSelector
}

input WpTagToPostConnectionTypeFilterInput {
  nodes: WpPostFilterListInput
  pageInfo: WpTagToPostConnectionPageInfoTypeFilterInput
}

input WpTagToPostConnectionTypeSortInput {
  nodes: WpPostSortInput
  pageInfo: WpTagToPostConnectionPageInfoTypeSortInput
}

"""Connection between the Tag type and the Taxonomy type"""
type WpTagToTaxonomyConnectionEdgeType implements WpEdgeType & WpOneToOneConnectionType & WpTaxonomyConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTaxonomy!
}

input WpTagToTaxonomyConnectionEdgeTypeFieldSelector {
  node: WpTaxonomyFieldSelector
}

input WpTagToTaxonomyConnectionEdgeTypeFilterInput {
  node: WpTaxonomyFilterInput
}

input WpTagToTaxonomyConnectionEdgeTypeSortInput {
  node: WpTaxonomySortInput
}

"""A taxonomy object"""
type WpTaxonomy implements Node & WpNode {
  """
  The url path of the first page of the archive page for this content type.
  """
  archivePath: String
  children: [Node!]!

  """List of Content Types associated with the Taxonomy"""
  connectedContentTypes: WpTaxonomyToContentTypeConnectionType

  """List of Term Nodes associated with the Taxonomy"""
  connectedTerms: WpTaxonomyToTermNodeConnectionType

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean
  id: ID!
  internal: Internal!

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String
  nodeType: String
  parent: Node

  """Whether the taxonomy is publicly queryable"""
  public: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
}

type WpTaxonomyConnection {
  distinct(field: WpTaxonomyFieldSelector!): [String!]!
  edges: [WpTaxonomyEdge!]!
  group(field: WpTaxonomyFieldSelector!, limit: Int, skip: Int): [WpTaxonomyGroupConnection!]!
  max(field: WpTaxonomyFieldSelector!): Float
  min(field: WpTaxonomyFieldSelector!): Float
  nodes: [WpTaxonomy!]!
  pageInfo: PageInfo!
  sum(field: WpTaxonomyFieldSelector!): Float
  totalCount: Int!
}

interface WpTaxonomyConnectionEdgeType implements WpEdgeType {
  """The connected Taxonomy Node"""
  node: WpTaxonomy!
}

interface WpTaxonomyConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpTaxonomyConnectionType implements WpConnectionType {
  """A list of connected Taxonomy Nodes"""
  nodes: [WpTaxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: WpTaxonomyConnectionPageInfoType!
}

type WpTaxonomyEdge {
  next: WpTaxonomy
  node: WpTaxonomy!
  previous: WpTaxonomy
}

input WpTaxonomyFieldSelector {
  archivePath: FieldSelectorEnum
  children: NodeFieldSelector
  connectedContentTypes: WpTaxonomyToContentTypeConnectionTypeFieldSelector
  connectedTerms: WpTaxonomyToTermNodeConnectionTypeFieldSelector
  description: FieldSelectorEnum
  graphqlPluralName: FieldSelectorEnum
  graphqlSingleName: FieldSelectorEnum
  hierarchical: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  label: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  public: FieldSelectorEnum
  restBase: FieldSelectorEnum
  restControllerClass: FieldSelectorEnum
  showCloud: FieldSelectorEnum
  showInAdminColumn: FieldSelectorEnum
  showInGraphql: FieldSelectorEnum
  showInMenu: FieldSelectorEnum
  showInNavMenus: FieldSelectorEnum
  showInQuickEdit: FieldSelectorEnum
  showInRest: FieldSelectorEnum
  showUi: FieldSelectorEnum
}

input WpTaxonomyFilterInput {
  archivePath: StringQueryOperatorInput
  children: NodeFilterListInput
  connectedContentTypes: WpTaxonomyToContentTypeConnectionTypeFilterInput
  connectedTerms: WpTaxonomyToTermNodeConnectionTypeFilterInput
  description: StringQueryOperatorInput
  graphqlPluralName: StringQueryOperatorInput
  graphqlSingleName: StringQueryOperatorInput
  hierarchical: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  label: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  public: BooleanQueryOperatorInput
  restBase: StringQueryOperatorInput
  restControllerClass: StringQueryOperatorInput
  showCloud: BooleanQueryOperatorInput
  showInAdminColumn: BooleanQueryOperatorInput
  showInGraphql: BooleanQueryOperatorInput
  showInMenu: BooleanQueryOperatorInput
  showInNavMenus: BooleanQueryOperatorInput
  showInQuickEdit: BooleanQueryOperatorInput
  showInRest: BooleanQueryOperatorInput
  showUi: BooleanQueryOperatorInput
}

input WpTaxonomyFilterListInput {
  elemMatch: WpTaxonomyFilterInput
}

type WpTaxonomyGroupConnection {
  distinct(field: WpTaxonomyFieldSelector!): [String!]!
  edges: [WpTaxonomyEdge!]!
  field: String!
  fieldValue: String
  group(field: WpTaxonomyFieldSelector!, limit: Int, skip: Int): [WpTaxonomyGroupConnection!]!
  max(field: WpTaxonomyFieldSelector!): Float
  min(field: WpTaxonomyFieldSelector!): Float
  nodes: [WpTaxonomy!]!
  pageInfo: PageInfo!
  sum(field: WpTaxonomyFieldSelector!): Float
  totalCount: Int!
}

input WpTaxonomySortInput {
  archivePath: SortOrderEnum
  children: NodeSortInput
  connectedContentTypes: WpTaxonomyToContentTypeConnectionTypeSortInput
  connectedTerms: WpTaxonomyToTermNodeConnectionTypeSortInput
  description: SortOrderEnum
  graphqlPluralName: SortOrderEnum
  graphqlSingleName: SortOrderEnum
  hierarchical: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  label: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  public: SortOrderEnum
  restBase: SortOrderEnum
  restControllerClass: SortOrderEnum
  showCloud: SortOrderEnum
  showInAdminColumn: SortOrderEnum
  showInGraphql: SortOrderEnum
  showInMenu: SortOrderEnum
  showInNavMenus: SortOrderEnum
  showInQuickEdit: SortOrderEnum
  showInRest: SortOrderEnum
  showUi: SortOrderEnum
}

"""Page Info on the &quot;TaxonomyToContentTypeConnection&quot;"""
type WpTaxonomyToContentTypeConnectionPageInfoType implements WpContentTypeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpTaxonomyToContentTypeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpTaxonomyToContentTypeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpTaxonomyToContentTypeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Taxonomy type and the ContentType type"""
type WpTaxonomyToContentTypeConnectionType implements WpConnectionType & WpContentTypeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentType!]!

  """Information about pagination in a connection."""
  pageInfo: WpTaxonomyToContentTypeConnectionPageInfoType!
}

input WpTaxonomyToContentTypeConnectionTypeFieldSelector {
  nodes: WpContentTypeFieldSelector
  pageInfo: WpTaxonomyToContentTypeConnectionPageInfoTypeFieldSelector
}

input WpTaxonomyToContentTypeConnectionTypeFilterInput {
  nodes: WpContentTypeFilterListInput
  pageInfo: WpTaxonomyToContentTypeConnectionPageInfoTypeFilterInput
}

input WpTaxonomyToContentTypeConnectionTypeSortInput {
  nodes: WpContentTypeSortInput
  pageInfo: WpTaxonomyToContentTypeConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;TaxonomyToTermNodeConnection&quot;"""
type WpTaxonomyToTermNodeConnectionPageInfoType implements WpPageInfoType & WpTermNodeConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpTaxonomyToTermNodeConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpTaxonomyToTermNodeConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpTaxonomyToTermNodeConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the Taxonomy type and the TermNode type"""
type WpTaxonomyToTermNodeConnectionType implements WpConnectionType & WpTermNodeConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTermNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpTaxonomyToTermNodeConnectionPageInfoType!
}

input WpTaxonomyToTermNodeConnectionTypeFieldSelector {
  nodes: WpTermNodeFieldSelector
  pageInfo: WpTaxonomyToTermNodeConnectionPageInfoTypeFieldSelector
}

input WpTaxonomyToTermNodeConnectionTypeFilterInput {
  nodes: WpTermNodeFilterListInput
  pageInfo: WpTaxonomyToTermNodeConnectionPageInfoTypeFilterInput
}

input WpTaxonomyToTermNodeConnectionTypeSortInput {
  nodes: WpTermNodeSortInput
  pageInfo: WpTaxonomyToTermNodeConnectionPageInfoTypeSortInput
}

"""The template assigned to the node"""
type WpTemplate_BbPressCreateTopic implements WpContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The template assigned to the node"""
type WpTemplate_BbPressForumsIndex implements WpContentTemplate {
  """The name of the template"""
  templateName: String
}

interface WpTermNode implements Node & WpNode & WpUniformResourceIdentifiable {
  children: [Node!]!

  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String
  nodeType: String
  parent: Node

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
}

type WpTermNodeConnection {
  distinct(field: WpTermNodeFieldSelector!): [String!]!
  edges: [WpTermNodeEdge!]!
  group(field: WpTermNodeFieldSelector!, limit: Int, skip: Int): [WpTermNodeGroupConnection!]!
  max(field: WpTermNodeFieldSelector!): Float
  min(field: WpTermNodeFieldSelector!): Float
  nodes: [WpTermNode!]!
  pageInfo: PageInfo!
  sum(field: WpTermNodeFieldSelector!): Float
  totalCount: Int!
}

interface WpTermNodeConnectionEdgeType implements WpEdgeType {
  """The connected TermNode Node"""
  node: WpTermNode!
}

interface WpTermNodeConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpTermNodeConnectionType implements WpConnectionType {
  """A list of connected TermNode Nodes"""
  nodes: [WpTermNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpTermNodeConnectionPageInfoType!
}

type WpTermNodeEdge {
  next: WpTermNode
  node: WpTermNode!
  previous: WpTermNode
}

input WpTermNodeFieldSelector {
  children: NodeFieldSelector
  count: FieldSelectorEnum
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  link: FieldSelectorEnum
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  slug: FieldSelectorEnum
  taxonomyName: FieldSelectorEnum
  termGroupId: FieldSelectorEnum
  termTaxonomyId: FieldSelectorEnum
  uri: FieldSelectorEnum
}

input WpTermNodeFilterInput {
  children: NodeFilterListInput
  count: IntQueryOperatorInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  link: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
  taxonomyName: StringQueryOperatorInput
  termGroupId: IntQueryOperatorInput
  termTaxonomyId: IntQueryOperatorInput
  uri: StringQueryOperatorInput
}

input WpTermNodeFilterListInput {
  elemMatch: WpTermNodeFilterInput
}

type WpTermNodeGroupConnection {
  distinct(field: WpTermNodeFieldSelector!): [String!]!
  edges: [WpTermNodeEdge!]!
  field: String!
  fieldValue: String
  group(field: WpTermNodeFieldSelector!, limit: Int, skip: Int): [WpTermNodeGroupConnection!]!
  max(field: WpTermNodeFieldSelector!): Float
  min(field: WpTermNodeFieldSelector!): Float
  nodes: [WpTermNode!]!
  pageInfo: PageInfo!
  sum(field: WpTermNodeFieldSelector!): Float
  totalCount: Int!
}

input WpTermNodeSortInput {
  children: NodeSortInput
  count: SortOrderEnum
  databaseId: SortOrderEnum
  description: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  link: SortOrderEnum
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  slug: SortOrderEnum
  taxonomyName: SortOrderEnum
  termGroupId: SortOrderEnum
  termTaxonomyId: SortOrderEnum
  uri: SortOrderEnum
}

interface WpUniformResourceIdentifiable implements Node & WpNode {
  children: [Node!]!
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!
  nodeType: String
  parent: Node

  """The unique resource identifier path"""
  uri: String
}

type WpUniformResourceIdentifiableConnection {
  distinct(field: WpUniformResourceIdentifiableFieldSelector!): [String!]!
  edges: [WpUniformResourceIdentifiableEdge!]!
  group(field: WpUniformResourceIdentifiableFieldSelector!, limit: Int, skip: Int): [WpUniformResourceIdentifiableGroupConnection!]!
  max(field: WpUniformResourceIdentifiableFieldSelector!): Float
  min(field: WpUniformResourceIdentifiableFieldSelector!): Float
  nodes: [WpUniformResourceIdentifiable!]!
  pageInfo: PageInfo!
  sum(field: WpUniformResourceIdentifiableFieldSelector!): Float
  totalCount: Int!
}

type WpUniformResourceIdentifiableEdge {
  next: WpUniformResourceIdentifiable
  node: WpUniformResourceIdentifiable!
  previous: WpUniformResourceIdentifiable
}

input WpUniformResourceIdentifiableFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
  uri: FieldSelectorEnum
}

input WpUniformResourceIdentifiableFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
  uri: StringQueryOperatorInput
}

type WpUniformResourceIdentifiableGroupConnection {
  distinct(field: WpUniformResourceIdentifiableFieldSelector!): [String!]!
  edges: [WpUniformResourceIdentifiableEdge!]!
  field: String!
  fieldValue: String
  group(field: WpUniformResourceIdentifiableFieldSelector!, limit: Int, skip: Int): [WpUniformResourceIdentifiableGroupConnection!]!
  max(field: WpUniformResourceIdentifiableFieldSelector!): Float
  min(field: WpUniformResourceIdentifiableFieldSelector!): Float
  nodes: [WpUniformResourceIdentifiable!]!
  pageInfo: PageInfo!
  sum(field: WpUniformResourceIdentifiableFieldSelector!): Float
  totalCount: Int!
}

input WpUniformResourceIdentifiableSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
  uri: SortOrderEnum
}

"""A User object"""
type WpUser implements Node & WpCommenter & WpDatabaseIdentifier & WpNode & WpUniformResourceIdentifiable {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String]
  children: [Node!]!

  """Connection between the User type and the Comment type"""
  comments: WpUserToCommentConnectionType

  """Identifies the primary key from the database."""
  databaseId: Int!

  """Description of the user."""
  description: String

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """
  A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String
  id: ID!
  internal: Internal!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """
  Display name of the user. This is equivalent to the WP_User-&gt;display_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """Nickname of the user."""
  nickname: String
  nodeType: String

  """Connection between the User type and the page type"""
  pages: WpUserToPageConnectionType
  parent: Node

  """Connection between the User type and the post type"""
  posts: WpUserToPostConnectionType

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """Connection between the User type and the UserRole type"""
  roles: WpUserToUserRoleConnectionType

  """
  Whether the Toolbar should be displayed when the user is viewing the site.
  """
  shouldShowAdminToolbar: Boolean

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """The unique resource identifier path"""
  uri: String

  """A website url that is associated with the user."""
  url: String

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
}

type WpUserConnection {
  distinct(field: WpUserFieldSelector!): [String!]!
  edges: [WpUserEdge!]!
  group(field: WpUserFieldSelector!, limit: Int, skip: Int): [WpUserGroupConnection!]!
  max(field: WpUserFieldSelector!): Float
  min(field: WpUserFieldSelector!): Float
  nodes: [WpUser!]!
  pageInfo: PageInfo!
  sum(field: WpUserFieldSelector!): Float
  totalCount: Int!
}

interface WpUserConnectionEdgeType implements WpEdgeType {
  """The connected User Node"""
  node: WpUser!
}

interface WpUserConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpUserConnectionType implements WpConnectionType {
  """A list of connected User Nodes"""
  nodes: [WpUser!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserConnectionPageInfoType!
}

type WpUserEdge {
  next: WpUser
  node: WpUser!
  previous: WpUser
}

input WpUserFieldSelector {
  avatar: WpAvatarFieldSelector
  capKey: FieldSelectorEnum
  capabilities: FieldSelectorEnum
  children: NodeFieldSelector
  comments: WpUserToCommentConnectionTypeFieldSelector
  databaseId: FieldSelectorEnum
  description: FieldSelectorEnum
  email: FieldSelectorEnum
  extraCapabilities: FieldSelectorEnum
  firstName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  isComment: FieldSelectorEnum
  isContentNode: FieldSelectorEnum
  isFrontPage: FieldSelectorEnum
  isPostsPage: FieldSelectorEnum
  isTermNode: FieldSelectorEnum
  lastName: FieldSelectorEnum
  locale: FieldSelectorEnum
  name: FieldSelectorEnum
  nicename: FieldSelectorEnum
  nickname: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  pages: WpUserToPageConnectionTypeFieldSelector
  parent: NodeFieldSelector
  posts: WpUserToPostConnectionTypeFieldSelector
  registeredDate: FieldSelectorEnum
  roles: WpUserToUserRoleConnectionTypeFieldSelector
  shouldShowAdminToolbar: FieldSelectorEnum
  slug: FieldSelectorEnum
  uri: FieldSelectorEnum
  url: FieldSelectorEnum
  username: FieldSelectorEnum
}

input WpUserFilterInput {
  avatar: WpAvatarFilterInput
  capKey: StringQueryOperatorInput
  capabilities: StringQueryOperatorInput
  children: NodeFilterListInput
  comments: WpUserToCommentConnectionTypeFilterInput
  databaseId: IntQueryOperatorInput
  description: StringQueryOperatorInput
  email: StringQueryOperatorInput
  extraCapabilities: StringQueryOperatorInput
  firstName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  isComment: BooleanQueryOperatorInput
  isContentNode: BooleanQueryOperatorInput
  isFrontPage: BooleanQueryOperatorInput
  isPostsPage: BooleanQueryOperatorInput
  isTermNode: BooleanQueryOperatorInput
  lastName: StringQueryOperatorInput
  locale: StringQueryOperatorInput
  name: StringQueryOperatorInput
  nicename: StringQueryOperatorInput
  nickname: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  pages: WpUserToPageConnectionTypeFilterInput
  parent: NodeFilterInput
  posts: WpUserToPostConnectionTypeFilterInput
  registeredDate: StringQueryOperatorInput
  roles: WpUserToUserRoleConnectionTypeFilterInput
  shouldShowAdminToolbar: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
  uri: StringQueryOperatorInput
  url: StringQueryOperatorInput
  username: StringQueryOperatorInput
}

type WpUserGroupConnection {
  distinct(field: WpUserFieldSelector!): [String!]!
  edges: [WpUserEdge!]!
  field: String!
  fieldValue: String
  group(field: WpUserFieldSelector!, limit: Int, skip: Int): [WpUserGroupConnection!]!
  max(field: WpUserFieldSelector!): Float
  min(field: WpUserFieldSelector!): Float
  nodes: [WpUser!]!
  pageInfo: PageInfo!
  sum(field: WpUserFieldSelector!): Float
  totalCount: Int!
}

"""A user role object"""
type WpUserRole implements Node & WpNode {
  """The capabilities that belong to this role"""
  capabilities: [String]
  children: [Node!]!

  """The display name of the role"""
  displayName: String
  id: ID!
  internal: Internal!

  """The registered name of the role"""
  name: String
  nodeType: String
  parent: Node
}

type WpUserRoleConnection {
  distinct(field: WpUserRoleFieldSelector!): [String!]!
  edges: [WpUserRoleEdge!]!
  group(field: WpUserRoleFieldSelector!, limit: Int, skip: Int): [WpUserRoleGroupConnection!]!
  max(field: WpUserRoleFieldSelector!): Float
  min(field: WpUserRoleFieldSelector!): Float
  nodes: [WpUserRole!]!
  pageInfo: PageInfo!
  sum(field: WpUserRoleFieldSelector!): Float
  totalCount: Int!
}

interface WpUserRoleConnectionEdgeType implements WpEdgeType {
  """The connected UserRole Node"""
  node: WpUserRole!
}

interface WpUserRoleConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpUserRoleConnectionType implements WpConnectionType {
  """A list of connected UserRole Nodes"""
  nodes: [WpUserRole!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserRoleConnectionPageInfoType!
}

type WpUserRoleEdge {
  next: WpUserRole
  node: WpUserRole!
  previous: WpUserRole
}

input WpUserRoleFieldSelector {
  capabilities: FieldSelectorEnum
  children: NodeFieldSelector
  displayName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  nodeType: FieldSelectorEnum
  parent: NodeFieldSelector
}

input WpUserRoleFilterInput {
  capabilities: StringQueryOperatorInput
  children: NodeFilterListInput
  displayName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeType: StringQueryOperatorInput
  parent: NodeFilterInput
}

input WpUserRoleFilterListInput {
  elemMatch: WpUserRoleFilterInput
}

type WpUserRoleGroupConnection {
  distinct(field: WpUserRoleFieldSelector!): [String!]!
  edges: [WpUserRoleEdge!]!
  field: String!
  fieldValue: String
  group(field: WpUserRoleFieldSelector!, limit: Int, skip: Int): [WpUserRoleGroupConnection!]!
  max(field: WpUserRoleFieldSelector!): Float
  min(field: WpUserRoleFieldSelector!): Float
  nodes: [WpUserRole!]!
  pageInfo: PageInfo!
  sum(field: WpUserRoleFieldSelector!): Float
  totalCount: Int!
}

input WpUserRoleSortInput {
  capabilities: SortOrderEnum
  children: NodeSortInput
  displayName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  nodeType: SortOrderEnum
  parent: NodeSortInput
}

input WpUserSortInput {
  avatar: WpAvatarSortInput
  capKey: SortOrderEnum
  capabilities: SortOrderEnum
  children: NodeSortInput
  comments: WpUserToCommentConnectionTypeSortInput
  databaseId: SortOrderEnum
  description: SortOrderEnum
  email: SortOrderEnum
  extraCapabilities: SortOrderEnum
  firstName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  isComment: SortOrderEnum
  isContentNode: SortOrderEnum
  isFrontPage: SortOrderEnum
  isPostsPage: SortOrderEnum
  isTermNode: SortOrderEnum
  lastName: SortOrderEnum
  locale: SortOrderEnum
  name: SortOrderEnum
  nicename: SortOrderEnum
  nickname: SortOrderEnum
  nodeType: SortOrderEnum
  pages: WpUserToPageConnectionTypeSortInput
  parent: NodeSortInput
  posts: WpUserToPostConnectionTypeSortInput
  registeredDate: SortOrderEnum
  roles: WpUserToUserRoleConnectionTypeSortInput
  shouldShowAdminToolbar: SortOrderEnum
  slug: SortOrderEnum
  uri: SortOrderEnum
  url: SortOrderEnum
  username: SortOrderEnum
}

"""Page Info on the &quot;UserToCommentConnection&quot;"""
type WpUserToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpUserToCommentConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpUserToCommentConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpUserToCommentConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the User type and the Comment type"""
type WpUserToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToCommentConnectionPageInfoType!
}

input WpUserToCommentConnectionTypeFieldSelector {
  nodes: WpCommentFieldSelector
  pageInfo: WpUserToCommentConnectionPageInfoTypeFieldSelector
}

input WpUserToCommentConnectionTypeFilterInput {
  nodes: WpCommentFilterListInput
  pageInfo: WpUserToCommentConnectionPageInfoTypeFilterInput
}

input WpUserToCommentConnectionTypeSortInput {
  nodes: WpCommentSortInput
  pageInfo: WpUserToCommentConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;UserToPageConnection&quot;"""
type WpUserToPageConnectionPageInfoType implements WpPageConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpUserToPageConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpUserToPageConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpUserToPageConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the User type and the page type"""
type WpUserToPageConnectionType implements WpConnectionType & WpPageConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPage!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToPageConnectionPageInfoType!
}

input WpUserToPageConnectionTypeFieldSelector {
  nodes: WpPageFieldSelector
  pageInfo: WpUserToPageConnectionPageInfoTypeFieldSelector
}

input WpUserToPageConnectionTypeFilterInput {
  nodes: WpPageFilterListInput
  pageInfo: WpUserToPageConnectionPageInfoTypeFilterInput
}

input WpUserToPageConnectionTypeSortInput {
  nodes: WpPageSortInput
  pageInfo: WpUserToPageConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;UserToPostConnection&quot;"""
type WpUserToPostConnectionPageInfoType implements WpPageInfoType & WpPostConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpUserToPostConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpUserToPostConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpUserToPostConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the User type and the post type"""
type WpUserToPostConnectionType implements WpConnectionType & WpPostConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToPostConnectionPageInfoType!
}

input WpUserToPostConnectionTypeFieldSelector {
  nodes: WpPostFieldSelector
  pageInfo: WpUserToPostConnectionPageInfoTypeFieldSelector
}

input WpUserToPostConnectionTypeFilterInput {
  nodes: WpPostFilterListInput
  pageInfo: WpUserToPostConnectionPageInfoTypeFilterInput
}

input WpUserToPostConnectionTypeSortInput {
  nodes: WpPostSortInput
  pageInfo: WpUserToPostConnectionPageInfoTypeSortInput
}

"""Page Info on the &quot;UserToUserRoleConnection&quot;"""
type WpUserToUserRoleConnectionPageInfoType implements WpPageInfoType & WpUserRoleConnectionPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input WpUserToUserRoleConnectionPageInfoTypeFieldSelector {
  endCursor: FieldSelectorEnum
  hasNextPage: FieldSelectorEnum
  hasPreviousPage: FieldSelectorEnum
  startCursor: FieldSelectorEnum
}

input WpUserToUserRoleConnectionPageInfoTypeFilterInput {
  endCursor: StringQueryOperatorInput
  hasNextPage: BooleanQueryOperatorInput
  hasPreviousPage: BooleanQueryOperatorInput
  startCursor: StringQueryOperatorInput
}

input WpUserToUserRoleConnectionPageInfoTypeSortInput {
  endCursor: SortOrderEnum
  hasNextPage: SortOrderEnum
  hasPreviousPage: SortOrderEnum
  startCursor: SortOrderEnum
}

"""Connection between the User type and the UserRole type"""
type WpUserToUserRoleConnectionType implements WpConnectionType & WpUserRoleConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpUserRole!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToUserRoleConnectionPageInfoType!
}

input WpUserToUserRoleConnectionTypeFieldSelector {
  nodes: WpUserRoleFieldSelector
  pageInfo: WpUserToUserRoleConnectionPageInfoTypeFieldSelector
}

input WpUserToUserRoleConnectionTypeFilterInput {
  nodes: WpUserRoleFilterListInput
  pageInfo: WpUserToUserRoleConnectionPageInfoTypeFilterInput
}

input WpUserToUserRoleConnectionTypeSortInput {
  nodes: WpUserRoleSortInput
  pageInfo: WpUserToUserRoleConnectionPageInfoTypeSortInput
}

"""Information needed by gatsby-source-wordpress."""
type WpWPGatsby {
  """Returns wether or not pretty permalinks are enabled."""
  arePrettyPermalinksEnabled: Boolean

  """Wether or not the Preview frontend URL is online."""
  isPreviewFrontendOnline: Boolean
}

input WpWPGatsbyFieldSelector {
  arePrettyPermalinksEnabled: FieldSelectorEnum
  isPreviewFrontendOnline: FieldSelectorEnum
}

input WpWPGatsbyFilterInput {
  arePrettyPermalinksEnabled: BooleanQueryOperatorInput
  isPreviewFrontendOnline: BooleanQueryOperatorInput
}

input WpWPGatsbySortInput {
  arePrettyPermalinksEnabled: SortOrderEnum
  isPreviewFrontendOnline: SortOrderEnum
}

"""The writing setting type"""
type WpWritingSettings {
  """Default post category."""
  defaultCategory: Int

  """Default post format."""
  defaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  useSmilies: Boolean
}

input WpWritingSettingsFieldSelector {
  defaultCategory: FieldSelectorEnum
  defaultPostFormat: FieldSelectorEnum
  useSmilies: FieldSelectorEnum
}

input WpWritingSettingsFilterInput {
  defaultCategory: IntQueryOperatorInput
  defaultPostFormat: StringQueryOperatorInput
  useSmilies: BooleanQueryOperatorInput
}

input WpWritingSettingsSortInput {
  defaultCategory: SortOrderEnum
  defaultPostFormat: SortOrderEnum
  useSmilies: SortOrderEnum
}