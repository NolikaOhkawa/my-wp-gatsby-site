{"version":3,"file":"component---src-templates-blog-post-archive-tsx-56b9471b0766be1e94b4.js","mappings":"yKA6CA,IAnCYA,KAAO,IAADC,EAChB,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,gBAAe,aAc5BC,EAAYF,SAAc,QAARD,EAANC,EAAQG,cAAM,IAAAJ,OAAR,EAANA,EAAgBK,IAElC,OACEC,EAAAA,cAAA,OAAKC,UAAU,OACZJ,GAAaG,EAAAA,cAAA,OAAKE,KAAKP,aAAM,EAANA,EAAQQ,YAAS,GAAQF,UAAU,aAAaG,IAAKP,KAC5EF,aAAM,EAANA,EAAQQ,YACPH,EAAAA,cAAA,SAAG,cACUA,EAAAA,cAAA,cAASL,EAAOQ,WAAmB,KAE7CR,aAAM,EAANA,EAAQU,cAAe,KAAI,KAE3BV,aAAM,EAANA,EAAQW,UACPN,EAAAA,cAAA,KAAGO,KAAI,yBAAyBZ,aAAM,EAANA,EAAQW,UAAO,KAAU,sCAI3D,C,4FC6BV,UA9DkBE,IAGZ,IAHa,KACjBC,EACAC,aAAa,aAAEC,EAAY,iBAAEC,IAC9BJ,EACC,MAAMK,EAAQJ,EAAKK,UAAUC,MAE7B,OAAKF,EAAMG,OAcThB,EAAAA,cAACiB,EAAAA,EAAM,CAACC,YAAU,GAChBlB,EAAAA,cAACmB,EAAAA,EAAG,CAACC,MAAM,cAEXpB,EAAAA,cAACP,EAAAA,EAAG,MAEJO,EAAAA,cAAA,MAAIqB,MAAO,CAAEC,UAAW,SACrBT,EAAMU,KAAIC,IACT,MAAMJ,EAAQI,EAAKJ,MAEnB,OACEpB,EAAAA,cAAA,MAAIyB,IAAKD,EAAKE,KACZ1B,EAAAA,cAAA,WACEC,UAAU,iBACV0B,WAAS,EACTC,SAAS,6BAET5B,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAAC6B,EAAAA,KAAI,CAACC,GAAIN,EAAKE,IAAKK,SAAS,OAC3B/B,EAAAA,cAAA,QAAM+B,SAAS,aAAYC,EAAAA,EAAAA,IAAMZ,MAGrCpB,EAAAA,cAAA,aAAQwB,EAAKS,OAEfjC,EAAAA,cAAA,WAAS+B,SAAS,gBAAeC,EAAAA,EAAAA,IAAMR,EAAKU,WAE3C,KAKVtB,GACCZ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC6B,EAAAA,KAAI,CAACC,GAAIlB,GAAkB,iBAC5BZ,EAAAA,cAAA,YAGHW,GAAgBX,EAAAA,cAAC6B,EAAAA,KAAI,CAACC,GAAInB,GAAc,cAjDzCX,EAAAA,cAACiB,EAAAA,EAAM,CAACC,YAAU,GAChBlB,EAAAA,cAACmB,EAAAA,EAAG,CAACC,MAAM,cACXpB,EAAAA,cAACP,EAAAA,EAAG,MACJO,EAAAA,cAAA,SAAG,kFA+CE,C","sources":["webpack://gatsby-starter-wordpress-blog/./src/components/bio.tsx","webpack://gatsby-starter-wordpress-blog/./src/templates/blog-post-archive.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst Bio = () => {\n  const { author } = useStaticQuery(graphql`\n    query BioQuery {\n      # if there was more than one user, this would need to be filtered\n      author: wpUser {\n        firstName\n        twitter: name\n        description\n        avatar {\n          url\n        }\n      }\n    }\n  `)\n\n  const avatarUrl = author?.avatar?.url\n\n  return (\n    <div className=\"bio\">\n      {avatarUrl && <img alt={author?.firstName || ``} className=\"bio-avatar\" src={avatarUrl} />}\n      {author?.firstName && (\n        <p>\n          Written by <strong>{author.firstName}</strong>\n          {` `}\n          {author?.description || null}\n          {` `}\n          {author?.twitter && (\n            <a href={`https://twitter.com/${author?.twitter || ``}`}>You should follow them on Twitter</a>\n          )}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath },\n}) => {\n  const posts = data.allWpPost.nodes\n\n  if (!posts.length) {\n    return (\n      <Layout isHomePage>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add posts to your WordPress site and they'll\n          appear here!\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout isHomePage>\n      <Seo title=\"All posts\" />\n\n      <Bio />\n\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.title\n\n          return (\n            <li key={post.uri}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.uri} itemProp=\"url\">\n                      <span itemProp=\"headline\">{parse(title)}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.date}</small>\n                </header>\n                <section itemProp=\"description\">{parse(post.excerpt)}</section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n\n      {previousPagePath && (\n        <>\n          <Link to={previousPagePath}>Previous page</Link>\n          <br />\n        </>\n      )}\n      {nextPagePath && <Link to={nextPagePath}>Next page</Link>}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query WordPressPostArchive($offset: Int!, $postsPerPage: Int!) {\n    allWpPost(\n      sort: { fields: [date], order: DESC }\n      limit: $postsPerPage\n      skip: $offset\n    ) {\n      nodes {\n        excerpt\n        uri\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        excerpt\n      }\n    }\n  }\n`\n"],"names":["Bio","_author$avatar","author","useStaticQuery","avatarUrl","avatar","url","React","className","alt","firstName","src","description","twitter","href","_ref","data","pageContext","nextPagePath","previousPagePath","posts","allWpPost","nodes","length","Layout","isHomePage","Seo","title","style","listStyle","map","post","key","uri","itemScope","itemType","Link","to","itemProp","parse","date","excerpt"],"sourceRoot":""}